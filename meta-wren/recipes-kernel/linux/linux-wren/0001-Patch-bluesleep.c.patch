From 66c444dbdc67d5703258a3a3f6e56e9f7fb06c54 Mon Sep 17 00:00:00 2001
From: Daniel Landau <daniel@landau.fi>
Date: Sat, 11 Mar 2017 23:49:28 +0200
Subject: [PATCH] Patch bluesleep.c

---
 drivers/BCM_LPM/bluesleep.c                 | 85 +++++++++++++++++++++++++++++
 drivers/tty/serial/msm_serial_hs.c          |  8 +++
 include/linux/platform_data/msm_serial_hs.h |  1 +
 3 files changed, 94 insertions(+)

diff --git a/drivers/BCM_LPM/bluesleep.c b/drivers/BCM_LPM/bluesleep.c
index adf3f4c0bca6..7dc207a774dc 100644
--- a/drivers/BCM_LPM/bluesleep.c
+++ b/drivers/BCM_LPM/bluesleep.c
@@ -69,12 +69,23 @@
 /* enable/disable wake-on-bluetooth */
 #define BT_ENABLE_IRQ_WAKE 1
 
+#define BT_PORT_ID  0
+
 #define gpio_bt_wake_up_host 48
 #define gpio_host_wake_up_bt 61
 #define gpio_host_wake_up_bt_evb2 45
 
 #define BT_PROC_FILE_PERMISSION 0777
 
+/* from msm_serial_hs.c */
+enum msm_hs_clk_states_e {
+	MSM_HS_CLK_PORT_OFF,     /* port not in use */
+	MSM_HS_CLK_OFF,          /* clock disabled */
+	MSM_HS_CLK_REQUEST_OFF,  /* disable after TX and RX flushed */
+	MSM_HS_CLK_ON,           /* clock enabled */
+};
+
+
 struct bluesleep_info {
 	unsigned host_wake;
 	unsigned ext_wake;
@@ -87,15 +98,21 @@ struct bluesleep_info {
 
 /* work function */
 static void bluesleep_sleep_work(struct work_struct *work);
+static void bluesleep_uart_awake_work(struct work_struct *work);
+
 
 /* work queue */
 DECLARE_DELAYED_WORK(sleep_workqueue, bluesleep_sleep_work);
+DECLARE_DELAYED_WORK(uart_awake_wq, bluesleep_uart_awake_work);
+
 
 /* Macros for handling sleep work */
 #define bluesleep_rx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
 #define bluesleep_tx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
 #define bluesleep_rx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
 #define bluesleep_tx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_uart_work()   schedule_delayed_work(&uart_awake_wq, 0)
+
 
 /* 1 second timeout */
 #define TX_TIMER_INTERVAL	1
@@ -161,6 +178,44 @@ void bluesleep_setup_uart_port(struct uart_port *uport)
 	bluesleep_uart_port = uport;
 }
 
+static int bluesleep_get_uart_state(void)
+{
+	return msm_hs_get_clock_state(bsi->uport);
+}
+
+static void hsuart_power_on(void)
+{
+	printk(KERN_INFO "HSUART CLOCK: ON\n");
+	msm_hs_request_clock_on(bsi->uport);
+	msm_hs_set_mctrl(bsi->uport, TIOCM_RTS);
+}
+
+static void hsuart_power_off(void)
+{
+	printk(KERN_INFO "HSUART CLOCK: OFF\n");
+	msm_hs_set_mctrl(bsi->uport, 0);
+	msm_hs_request_clock_off(bsi->uport);
+}
+
+static void bluesleep_uart_awake_work(struct work_struct *work)
+{
+	int clk_state;
+
+	if (!bsi->uport) {
+		BT_DBG("hsuart_power called. But uport is null");
+		return;
+	}
+
+	clk_state = bluesleep_get_uart_state();
+	if (clk_state == MSM_HS_CLK_OFF) {
+		if (has_lpm_enabled)
+			hsuart_power_on();
+	} else if (clk_state == MSM_HS_CLK_REQUEST_OFF) {
+		bluesleep_uart_work();
+	}
+}
+
+
 static void hsuart_power(int on)
 {
 	if (on) {
@@ -373,6 +428,36 @@ static ssize_t bluesleep_read_proc_btwrite(struct file *filp, char __user *buff,
 	return sprintf(buff, "unsupported to read\n");
 }
 
+/**
+ * Handles HCI device events.
+ * @param this Not used.
+ * @param event The event that occurred.
+ * @param data The HCI device associated with the event.
+ * @return <code>NOTIFY_DONE</code>.
+ */
+void bluesleep_hci_event(unsigned long event)
+{
+ switch (event) {
+ case HCI_DEV_REG:
+   has_lpm_enabled = true;
+   bsi->uport = msm_hs_get_uart_port(BT_PORT_ID);
+   /* if bluetooth started, start bluesleep*/
+   bluesleep_start();
+   break;
+ case HCI_DEV_UNREG:
+   bluesleep_stop();
+   /* flush pending works */
+   flush_delayed_work(&uart_awake_wq);
+   has_lpm_enabled = false;
+   bsi->uport = NULL;
+   /* if bluetooth stopped, stop bluesleep also */
+   break;
+ case HCI_DEV_WRITE:
+   bluesleep_outgoing_data();
+   break;
+ }
+}
+
 static ssize_t bluesleep_write_proc_btwrite(struct file *filp, const char __user *buff, size_t count, loff_t *pos)
 {
 	char b;
diff --git a/drivers/tty/serial/msm_serial_hs.c b/drivers/tty/serial/msm_serial_hs.c
index f694b9b28a8d..f194d6d57460 100644
--- a/drivers/tty/serial/msm_serial_hs.c
+++ b/drivers/tty/serial/msm_serial_hs.c
@@ -2407,6 +2407,14 @@ void msm_hs_request_clock_on(struct uart_port *uport)
 }
 EXPORT_SYMBOL(msm_hs_request_clock_on);
 
+int msm_hs_get_clock_state(struct uart_port *uport)
+{
+	struct msm_hs_port *msm_uport = UARTDM_TO_MSM(uport);
+
+	return (int)msm_uport->clk_state;
+}
+EXPORT_SYMBOL(msm_hs_get_clock_state);
+
 static irqreturn_t msm_hs_wakeup_isr(int irq, void *dev)
 {
 	unsigned int wakeup = 0;
diff --git a/include/linux/platform_data/msm_serial_hs.h b/include/linux/platform_data/msm_serial_hs.h
index cb14dee59787..5cd9ffd630d0 100644
--- a/include/linux/platform_data/msm_serial_hs.h
+++ b/include/linux/platform_data/msm_serial_hs.h
@@ -60,6 +60,7 @@ typedef void (*wake_peer_fn)(struct uart_port *);
 unsigned int msm_hs_tx_empty(struct uart_port *uport);
 void msm_hs_request_clock_off(struct uart_port *uport);
 void msm_hs_request_clock_on(struct uart_port *uport);
+int msm_hs_get_clock_state(struct uart_port *uport);
 struct uart_port *msm_hs_get_uart_port(int port_index);
 void msm_hs_set_mctrl(struct uart_port *uport,
 				    unsigned int mctrl);
-- 
2.12.0

