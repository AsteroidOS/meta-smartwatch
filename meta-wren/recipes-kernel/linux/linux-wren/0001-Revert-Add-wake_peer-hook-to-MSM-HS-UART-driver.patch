From a0fbbd3cb72d890d22314b00051c438bcd861457 Mon Sep 17 00:00:00 2001
From: Daniel Landau <daniel@landau.fi>
Date: Sun, 12 Mar 2017 13:58:42 +0200
Subject: [PATCH] Revert "Add wake_peer hook to MSM HS UART driver."

This reverts commit 4f3251a5db771bbed039b2ac27030d38b53c473c.
---
 drivers/tty/serial/msm_serial_hs.c          | 23 ++++++-----------------
 include/linux/platform_data/msm_serial_hs.h |  3 ---
 2 files changed, 6 insertions(+), 20 deletions(-)

diff --git a/drivers/tty/serial/msm_serial_hs.c b/drivers/tty/serial/msm_serial_hs.c
index f694b9b28a8d..ca8e05abb42b 100644
--- a/drivers/tty/serial/msm_serial_hs.c
+++ b/drivers/tty/serial/msm_serial_hs.c
@@ -257,7 +257,6 @@ struct msm_hs_port {
 	struct pinctrl_state *gpio_state_suspend;
 	bool flow_control;
 	bool obs;
-	wake_peer_fn wake_peer;
 	bool tx_pending;
 };
 
@@ -290,6 +289,8 @@ static void msm_hs_bus_voting(struct msm_hs_port *msm_uport, unsigned int vote);
 static struct msm_hs_port *msm_hs_get_hs_port(int port_index);
 static void msm_hs_queue_rx_desc(struct msm_hs_port *msm_uport);
 
+extern void bluesleep_setup_uart_port(struct uart_port *uport); //ASUS_BSP BerylHou +++
+
 #define UARTDM_TO_MSM(uart_port) \
 	container_of((uart_port), struct msm_hs_port, uport)
 
@@ -1881,20 +1882,6 @@ static void msm_hs_sps_rx_callback(struct sps_event_notify *notify)
 	}
 }
 
-void msm_hs_set_wake_peer(struct uart_port *uport, wake_peer_fn wake_peer)
-{
-	struct msm_hs_port *msm_uport = UARTDM_TO_MSM(uport);
-	msm_uport->wake_peer = wake_peer;
-}
-
-static void msm_hs_wake_peer(struct uart_port *uport)
-{
-	struct msm_hs_port *msm_uport = UARTDM_TO_MSM(uport);
-
-	if (msm_uport->wake_peer)
-		msm_uport->wake_peer(uport);
-}
-
 /*
  *  Standard API, Current states of modem control inputs
  *
@@ -2140,7 +2127,7 @@ static int msm_hs_check_clock_off(struct uart_port *uport)
 	spin_unlock_irqrestore(&uport->lock, flags);
 
 	mutex_unlock(&msm_uport->clk_mutex);
-	MSM_HS_INFO("%s: Clocks Off Successfully\n", __func__);
+	printk("%s: Clocks Off Successfully\n", __func__);
 	return 1;
 }
 
@@ -3368,6 +3355,9 @@ static int msm_hs_probe(struct platform_device *pdev)
 	uport->line = pdev->id;
 	if (pdata != NULL && pdata->userid && pdata->userid <= UARTDM_NR)
 		uport->line = pdata->userid;
+
+	bluesleep_setup_uart_port(uport); //ASUS_BSP BerylHou +++ "set bluesleep uart port"
+
 	ret = uart_add_one_port(&msm_hs_driver, uport);
 	if (!ret) {
 		msm_hs_clock_unvote(msm_uport);
@@ -3646,7 +3636,6 @@ static struct uart_ops msm_hs_ops = {
 	.config_port = msm_hs_config_port,
 	.flush_buffer = NULL,
 	.ioctl = msm_hs_ioctl,
-	.wake_peer = msm_hs_wake_peer,
 };
 
 module_init(msm_serial_hs_init);
diff --git a/include/linux/platform_data/msm_serial_hs.h b/include/linux/platform_data/msm_serial_hs.h
index cb14dee59787..283bdd1ee0dd 100644
--- a/include/linux/platform_data/msm_serial_hs.h
+++ b/include/linux/platform_data/msm_serial_hs.h
@@ -54,8 +54,6 @@ struct msm_serial_hs_platform_data {
 	bool obs;
 };
 
-typedef void (*wake_peer_fn)(struct uart_port *);
-
 /* return true when tx is empty */
 unsigned int msm_hs_tx_empty(struct uart_port *uport);
 void msm_hs_request_clock_off(struct uart_port *uport);
@@ -63,5 +61,4 @@ void msm_hs_request_clock_on(struct uart_port *uport);
 struct uart_port *msm_hs_get_uart_port(int port_index);
 void msm_hs_set_mctrl(struct uart_port *uport,
 				    unsigned int mctrl);
-void msm_hs_set_wake_peer(struct uart_port *uport, wake_peer_fn wake_peer);
 #endif
-- 
2.12.0

