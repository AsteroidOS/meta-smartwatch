From 7b8ca6038de3abc71f8c8f2ab2d55df18277001d Mon Sep 17 00:00:00 2001
From: Daniel Landau <daniel@landau.fi>
Date: Sat, 11 Mar 2017 23:54:21 +0200
Subject: [PATCH] Revert "Sparrow: audio: security patch for CVE-2016-2066 and
 CVE-2016-2469"

This reverts commit 73210bbb146ef52802dfd7bc842aa7565417c7ab.
---
 sound/soc/msm/Kconfig                           |   2 +
 sound/soc/msm/qdsp6v2/Makefile                  |   3 +
 sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.c | 664 +++++++-----------------
 sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.h |   4 +-
 sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c      |   2 +-
 5 files changed, 200 insertions(+), 475 deletions(-)

diff --git a/sound/soc/msm/Kconfig b/sound/soc/msm/Kconfig
index 6a31a704a290..0dfdec41c75a 100644
--- a/sound/soc/msm/Kconfig
+++ b/sound/soc/msm/Kconfig
@@ -178,6 +178,8 @@ config SND_SOC_MSM8226
 	select SND_SOC_WCD9306
 	select SND_SOC_WCD9330
 	select SND_DYNAMIC_MINORS
+	select DOLBY_DAP
+	select DTS_SRS_TM
 	select QTI_PP
 	select SND_SOC_CPE
 	select SND_HWDEP
diff --git a/sound/soc/msm/qdsp6v2/Makefile b/sound/soc/msm/qdsp6v2/Makefile
index 0e6cdcc7e393..8e318cb1b0eb 100644
--- a/sound/soc/msm/qdsp6v2/Makefile
+++ b/sound/soc/msm/qdsp6v2/Makefile
@@ -7,6 +7,9 @@ snd-soc-qdsp6v2-objs += msm-dai-q6-v2.o msm-pcm-q6-v2.o msm-pcm-routing-v2.o \
 			msm-audio-effects-q6-v2.o msm-pcm-loopback-v2.o
 obj-$(CONFIG_SND_SOC_QDSP6V2) += snd-soc-qdsp6v2.o msm-pcm-dtmf-v2.o \
 				 msm-dai-stub-v2.o
+obj-$(CONFIG_DTS_EAGLE) += msm-dts-eagle.o
+obj-$(CONFIG_DOLBY_DAP) += msm-dolby-dap-config.o
+obj-$(CONFIG_DTS_SRS_TM) += msm-dts-srs-tm-config.o
 obj-$(CONFIG_QTI_PP) += msm-qti-pp-config.o
 obj-y += audio_calibration.o audio_cal_utils.o q6adm.o q6afe.o q6asm.o \
 	q6audio-v2.o q6voice.o q6core.o rtac.o q6lsm.o audio_slimslave.o
diff --git a/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.c b/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.c
index 5aa2480de568..bd1feeab0b9e 100644
--- a/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.c
+++ b/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2013-2016, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2013-2015, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -16,39 +16,19 @@
 #include <sound/compress_params.h>
 #include "msm-audio-effects-q6-v2.h"
 
-#define MAX_ENABLE_CMD_SIZE 32
-
-#define GET_NEXT(ptr, upper_limit, rc)                                  \
-({                                                                      \
-	if (((ptr) + 1) > (upper_limit)) {                              \
-		pr_err("%s: param list out of boundary\n", __func__);   \
-		(rc) = -EINVAL;                                         \
-	}                                                               \
-	((rc) == 0) ? *(ptr)++ :  -EINVAL;                              \
-})
-
-#define CHECK_PARAM_LEN(len, max_len, tag, rc)                          \
-do {                                                                    \
-	if ((len) > (max_len)) {                                        \
-		pr_err("%s: params length overflows\n", (tag));         \
-		(rc) = -EINVAL;                                         \
-	}                                                               \
-} while (0)
-
 int msm_audio_effects_virtualizer_handler(struct audio_client *ac,
 				struct virtualizer_params *virtualizer,
 				long *values)
 {
-	long *param_max_offset = values + MAX_PP_PARAMS_SZ - 1;
-	char *params = NULL;
-	int rc = 0;
-	int devices = GET_NEXT(values, param_max_offset, rc);
-	int num_commands = GET_NEXT(values, param_max_offset, rc);
+	int devices = *values++;
+	int num_commands = *values++;
+	char *params;
 	int *updt_params, i, prev_enable_flag;
 	uint32_t params_length = (MAX_INBAND_PARAM_SZ);
+	int rc = 0;
 
 	pr_debug("%s\n", __func__);
-	if (!ac || (devices == -EINVAL) || (num_commands == -EINVAL)) {
+	if (!ac) {
 		pr_err("%s: cannot set audio effects\n", __func__);
 		return -EINVAL;
 	}
@@ -61,14 +41,10 @@ int msm_audio_effects_virtualizer_handler(struct audio_client *ac,
 	updt_params = (int *)params;
 	params_length = 0;
 	for (i = 0; i < num_commands; i++) {
-		uint32_t command_id =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t command_config_state =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t index_offset =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t length =
-			GET_NEXT(values, param_max_offset, rc);
+		uint32_t command_id = *values++;
+		uint32_t command_config_state = *values++;
+		uint32_t index_offset = *values++;
+		uint32_t length = *values++;
 		switch (command_id) {
 		case VIRTUALIZER_ENABLE:
 			if (length != 1 || index_offset != 0) {
@@ -77,26 +53,17 @@ int msm_audio_effects_virtualizer_handler(struct audio_client *ac,
 				goto invalid_config;
 			}
 			prev_enable_flag = virtualizer->enable_flag;
-			virtualizer->enable_flag =
-				GET_NEXT(values, param_max_offset, rc);
+			virtualizer->enable_flag = *values++;
 			pr_debug("%s:VIRT ENABLE prev:%d, new:%d\n", __func__,
 				prev_enable_flag, virtualizer->enable_flag);
 			if (prev_enable_flag != virtualizer->enable_flag) {
+				*updt_params++ = AUDPROC_MODULE_ID_VIRTUALIZER;
+				*updt_params++ =
+					AUDPROC_PARAM_ID_VIRTUALIZER_ENABLE;
+				*updt_params++ = VIRTUALIZER_ENABLE_PARAM_SZ;
+				*updt_params++ = virtualizer->enable_flag;
 				params_length += COMMAND_PAYLOAD_SZ +
 					VIRTUALIZER_ENABLE_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"VIRT ENABLE", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-				AUDPROC_MODULE_ID_VIRTUALIZER;
-				*updt_params++ =
-				AUDPROC_PARAM_ID_VIRTUALIZER_ENABLE;
-				*updt_params++ =
-				VIRTUALIZER_ENABLE_PARAM_SZ;
-				*updt_params++ =
-				virtualizer->enable_flag;
 			}
 			break;
 		case VIRTUALIZER_STRENGTH:
@@ -105,26 +72,17 @@ int msm_audio_effects_virtualizer_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			virtualizer->strength =
-				GET_NEXT(values, param_max_offset, rc);
+			virtualizer->strength = *values++;
 			pr_debug("%s: VIRT STRENGTH val: %d\n",
 					__func__, virtualizer->strength);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					VIRTUALIZER_STRENGTH_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"VIRT STRENGTH", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_VIRTUALIZER;
+				*updt_params++ = AUDPROC_MODULE_ID_VIRTUALIZER;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_VIRTUALIZER_STRENGTH;
-				*updt_params++ =
+				*updt_params++ = VIRTUALIZER_STRENGTH_PARAM_SZ;
+				*updt_params++ = virtualizer->strength;
+				params_length += COMMAND_PAYLOAD_SZ +
 					VIRTUALIZER_STRENGTH_PARAM_SZ;
-				*updt_params++ =
-					virtualizer->strength;
 			}
 			break;
 		case VIRTUALIZER_OUT_TYPE:
@@ -133,26 +91,17 @@ int msm_audio_effects_virtualizer_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			virtualizer->out_type =
-				GET_NEXT(values, param_max_offset, rc);
+			virtualizer->out_type = *values++;
 			pr_debug("%s: VIRT OUT_TYPE val:%d\n",
 				__func__, virtualizer->out_type);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					VIRTUALIZER_OUT_TYPE_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"VIRT OUT_TYPE", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_VIRTUALIZER;
+				*updt_params++ = AUDPROC_MODULE_ID_VIRTUALIZER;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_VIRTUALIZER_OUT_TYPE;
-				*updt_params++ =
+				*updt_params++ = VIRTUALIZER_OUT_TYPE_PARAM_SZ;
+				*updt_params++ = virtualizer->out_type;
+				params_length += COMMAND_PAYLOAD_SZ +
 					VIRTUALIZER_OUT_TYPE_PARAM_SZ;
-				*updt_params++ =
-					virtualizer->out_type;
 			}
 			break;
 		case VIRTUALIZER_GAIN_ADJUST:
@@ -161,26 +110,18 @@ int msm_audio_effects_virtualizer_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			virtualizer->gain_adjust =
-				GET_NEXT(values, param_max_offset, rc);
+			virtualizer->gain_adjust = *values++;
 			pr_debug("%s: VIRT GAIN_ADJUST val:%d\n",
 				__func__, virtualizer->gain_adjust);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					VIRTUALIZER_GAIN_ADJUST_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"VIRT GAIN_ADJUST", rc);
-				if (rc != 0)
-					break;
+				*updt_params++ = AUDPROC_MODULE_ID_VIRTUALIZER;
 				*updt_params++ =
-				AUDPROC_MODULE_ID_VIRTUALIZER;
+				       AUDPROC_PARAM_ID_VIRTUALIZER_GAIN_ADJUST;
 				*updt_params++ =
-				AUDPROC_PARAM_ID_VIRTUALIZER_GAIN_ADJUST;
-				*updt_params++ =
-				VIRTUALIZER_GAIN_ADJUST_PARAM_SZ;
-				*updt_params++ =
-				virtualizer->gain_adjust;
+					VIRTUALIZER_GAIN_ADJUST_PARAM_SZ;
+				*updt_params++ = virtualizer->gain_adjust;
+				params_length += COMMAND_PAYLOAD_SZ +
+					VIRTUALIZER_GAIN_ADJUST_PARAM_SZ;
 			}
 			break;
 		default:
@@ -188,7 +129,7 @@ int msm_audio_effects_virtualizer_handler(struct audio_client *ac,
 			break;
 		}
 	}
-	if (params_length && (rc == 0))
+	if (params_length)
 		q6asm_send_audio_effects_params(ac, params,
 						params_length);
 invalid_config:
@@ -200,16 +141,15 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				     struct reverb_params *reverb,
 				     long *values)
 {
-	long *param_max_offset = values + MAX_PP_PARAMS_SZ - 1;
-	char *params = NULL;
-	int rc = 0;
-	int devices = GET_NEXT(values, param_max_offset, rc);
-	int num_commands = GET_NEXT(values, param_max_offset, rc);
+	int devices = *values++;
+	int num_commands = *values++;
+	char *params;
 	int *updt_params, i, prev_enable_flag;
 	uint32_t params_length = (MAX_INBAND_PARAM_SZ);
+	int rc = 0;
 
 	pr_debug("%s\n", __func__);
-	if (!ac || (devices == -EINVAL) || (num_commands == -EINVAL)) {
+	if (!ac) {
 		pr_err("%s: cannot set audio effects\n", __func__);
 		return -EINVAL;
 	}
@@ -222,14 +162,10 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 	updt_params = (int *)params;
 	params_length = 0;
 	for (i = 0; i < num_commands; i++) {
-		uint32_t command_id =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t command_config_state =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t index_offset =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t length =
-			GET_NEXT(values, param_max_offset, rc);
+		uint32_t command_id = *values++;
+		uint32_t command_config_state = *values++;
+		uint32_t index_offset = *values++;
+		uint32_t length = *values++;
 		switch (command_id) {
 		case REVERB_ENABLE:
 			if (length != 1 || index_offset != 0) {
@@ -238,26 +174,16 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				goto invalid_config;
 			}
 			prev_enable_flag = reverb->enable_flag;
-			reverb->enable_flag =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->enable_flag = *values++;
 			pr_debug("%s:REVERB_ENABLE prev:%d,new:%d\n", __func__,
 					prev_enable_flag, reverb->enable_flag);
 			if (prev_enable_flag != reverb->enable_flag) {
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_PARAM_ID_REVERB_ENABLE;
+				*updt_params++ = REVERB_ENABLE_PARAM_SZ;
+				*updt_params++ = reverb->enable_flag;
 				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_ENABLE_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_ENABLE", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
-				*updt_params++ =
-					AUDPROC_PARAM_ID_REVERB_ENABLE;
-				*updt_params++ =
-					REVERB_ENABLE_PARAM_SZ;
-				*updt_params++ =
-					reverb->enable_flag;
 			}
 			break;
 		case REVERB_MODE:
@@ -266,26 +192,16 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->mode =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->mode = *values++;
 			pr_debug("%s: REVERB_MODE val:%d\n",
 				__func__, reverb->mode);
 			if (command_config_state == CONFIG_SET) {
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_PARAM_ID_REVERB_MODE;
+				*updt_params++ = REVERB_MODE_PARAM_SZ;
+				*updt_params++ = reverb->mode;
 				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_MODE_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_MODE", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
-				*updt_params++ =
-					AUDPROC_PARAM_ID_REVERB_MODE;
-				*updt_params++ =
-					REVERB_MODE_PARAM_SZ;
-				*updt_params++ =
-					reverb->mode;
 			}
 			break;
 		case REVERB_PRESET:
@@ -294,26 +210,16 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->preset =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->preset = *values++;
 			pr_debug("%s: REVERB_PRESET val:%d\n",
 					__func__, reverb->preset);
 			if (command_config_state == CONFIG_SET) {
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_PARAM_ID_REVERB_PRESET;
+				*updt_params++ = REVERB_PRESET_PARAM_SZ;
+				*updt_params++ = reverb->preset;
 				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_PRESET_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_PRESET", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
-				*updt_params++ =
-					AUDPROC_PARAM_ID_REVERB_PRESET;
-				*updt_params++ =
-					REVERB_PRESET_PARAM_SZ;
-				*updt_params++ =
-					reverb->preset;
 			}
 			break;
 		case REVERB_WET_MIX:
@@ -322,26 +228,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->wet_mix =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->wet_mix = *values++;
 			pr_debug("%s: REVERB_WET_MIX val:%d\n",
 				__func__, reverb->wet_mix);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_WET_MIX_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_WET_MIX", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_WET_MIX;
-				*updt_params++ =
+				*updt_params++ = REVERB_WET_MIX_PARAM_SZ;
+				*updt_params++ = reverb->wet_mix;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_WET_MIX_PARAM_SZ;
-				*updt_params++ =
-					reverb->wet_mix;
 			}
 			break;
 		case REVERB_GAIN_ADJUST:
@@ -350,26 +247,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->gain_adjust =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->gain_adjust = *values++;
 			pr_debug("%s: REVERB_GAIN_ADJUST val:%d\n",
 					__func__, reverb->gain_adjust);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_GAIN_ADJUST_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_GAIN_ADJUST", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_GAIN_ADJUST;
-				*updt_params++ =
+				*updt_params++ = REVERB_GAIN_ADJUST_PARAM_SZ;
+				*updt_params++ = reverb->gain_adjust;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_GAIN_ADJUST_PARAM_SZ;
-				*updt_params++ =
-					reverb->gain_adjust;
 			}
 			break;
 		case REVERB_ROOM_LEVEL:
@@ -378,26 +266,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->room_level =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->room_level = *values++;
 			pr_debug("%s: REVERB_ROOM_LEVEL val:%d\n",
 				__func__, reverb->room_level);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_ROOM_LEVEL_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_ROOM_LEVEL", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_ROOM_LEVEL;
-				*updt_params++ =
+				*updt_params++ = REVERB_ROOM_LEVEL_PARAM_SZ;
+				*updt_params++ = reverb->room_level;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_ROOM_LEVEL_PARAM_SZ;
-				*updt_params++ =
-					reverb->room_level;
 			}
 			break;
 		case REVERB_ROOM_HF_LEVEL:
@@ -406,26 +285,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->room_hf_level =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->room_hf_level = *values++;
 			pr_debug("%s: REVERB_ROOM_HF_LEVEL val%d\n",
 				__func__, reverb->room_hf_level);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_ROOM_HF_LEVEL_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_ROOM_HF_LEVEL", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_ROOM_HF_LEVEL;
-				*updt_params++ =
+				*updt_params++ = REVERB_ROOM_HF_LEVEL_PARAM_SZ;
+				*updt_params++ = reverb->room_hf_level;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_ROOM_HF_LEVEL_PARAM_SZ;
-				*updt_params++ =
-					reverb->room_hf_level;
 			}
 			break;
 		case REVERB_DECAY_TIME:
@@ -434,26 +304,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->decay_time =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->decay_time = *values++;
 			pr_debug("%s: REVERB_DECAY_TIME val:%d\n",
 				__func__, reverb->decay_time);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_DECAY_TIME_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_DECAY_TIME", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_DECAY_TIME;
-				*updt_params++ =
+				*updt_params++ = REVERB_DECAY_TIME_PARAM_SZ;
+				*updt_params++ = reverb->decay_time;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_DECAY_TIME_PARAM_SZ;
-				*updt_params++ =
-					reverb->decay_time;
 			}
 			break;
 		case REVERB_DECAY_HF_RATIO:
@@ -462,26 +323,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->decay_hf_ratio =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->decay_hf_ratio = *values++;
 			pr_debug("%s: REVERB_DECAY_HF_RATIO val%d\n",
 				__func__, reverb->decay_hf_ratio);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_DECAY_HF_RATIO_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_DECAY_HF_RATIO", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_DECAY_HF_RATIO;
-				*updt_params++ =
+				*updt_params++ = REVERB_DECAY_HF_RATIO_PARAM_SZ;
+				*updt_params++ = reverb->decay_hf_ratio;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_DECAY_HF_RATIO_PARAM_SZ;
-				*updt_params++ =
-					reverb->decay_hf_ratio;
 			}
 			break;
 		case REVERB_REFLECTIONS_LEVEL:
@@ -490,26 +342,18 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->reflections_level =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->reflections_level = *values++;
 			pr_debug("%s: REVERB_REFLECTIONS_LEVEL val:%d\n",
 				__func__, reverb->reflections_level);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_REFLECTIONS_LEVEL_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_REFLECTIONS_LEVEL", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-				AUDPROC_MODULE_ID_REVERB;
-				*updt_params++ =
-				AUDPROC_PARAM_ID_REVERB_REFLECTIONS_LEVEL;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
-				REVERB_REFLECTIONS_LEVEL_PARAM_SZ;
+				      AUDPROC_PARAM_ID_REVERB_REFLECTIONS_LEVEL;
 				*updt_params++ =
-				reverb->reflections_level;
+					REVERB_REFLECTIONS_LEVEL_PARAM_SZ;
+				*updt_params++ = reverb->reflections_level;
+				params_length += COMMAND_PAYLOAD_SZ +
+					REVERB_REFLECTIONS_LEVEL_PARAM_SZ;
 			}
 			break;
 		case REVERB_REFLECTIONS_DELAY:
@@ -518,26 +362,18 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->reflections_delay =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->reflections_delay = *values++;
 			pr_debug("%s: REVERB_REFLECTIONS_DELAY val:%d\n",
 				__func__, reverb->reflections_delay);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_REFLECTIONS_DELAY_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_REFLECTIONS_DELAY", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-				AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
-				AUDPROC_PARAM_ID_REVERB_REFLECTIONS_DELAY;
+				      AUDPROC_PARAM_ID_REVERB_REFLECTIONS_DELAY;
 				*updt_params++ =
-				REVERB_REFLECTIONS_DELAY_PARAM_SZ;
-				*updt_params++ =
-				reverb->reflections_delay;
+					REVERB_REFLECTIONS_DELAY_PARAM_SZ;
+				*updt_params++ = reverb->reflections_delay;
+				params_length += COMMAND_PAYLOAD_SZ +
+					REVERB_REFLECTIONS_DELAY_PARAM_SZ;
 			}
 			break;
 		case REVERB_LEVEL:
@@ -546,26 +382,16 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->level =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->level = *values++;
 			pr_debug("%s: REVERB_LEVEL val:%d\n",
 				__func__, reverb->level);
 			if (command_config_state == CONFIG_SET) {
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_PARAM_ID_REVERB_LEVEL;
+				*updt_params++ = REVERB_LEVEL_PARAM_SZ;
+				*updt_params++ = reverb->level;
 				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_LEVEL_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_LEVEL", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
-				*updt_params++ =
-					AUDPROC_PARAM_ID_REVERB_LEVEL;
-				*updt_params++ =
-					REVERB_LEVEL_PARAM_SZ;
-				*updt_params++ =
-					reverb->level;
 			}
 			break;
 		case REVERB_DELAY:
@@ -574,26 +400,16 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->delay =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->delay = *values++;
 			pr_debug("%s:REVERB_DELAY val:%d\n",
 					__func__, reverb->delay);
 			if (command_config_state == CONFIG_SET) {
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_PARAM_ID_REVERB_DELAY;
+				*updt_params++ = REVERB_DELAY_PARAM_SZ;
+				*updt_params++ = reverb->delay;
 				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_DELAY_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_DELAY", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
-				*updt_params++ =
-					AUDPROC_PARAM_ID_REVERB_DELAY;
-				*updt_params++ =
-					REVERB_DELAY_PARAM_SZ;
-				*updt_params++ =
-					reverb->delay;
 			}
 			break;
 		case REVERB_DIFFUSION:
@@ -602,26 +418,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->diffusion =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->diffusion = *values++;
 			pr_debug("%s: REVERB_DIFFUSION val:%d\n",
 				__func__, reverb->diffusion);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_DIFFUSION_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_DIFFUSION", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_DIFFUSION;
-				*updt_params++ =
+				*updt_params++ = REVERB_DIFFUSION_PARAM_SZ;
+				*updt_params++ = reverb->diffusion;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_DIFFUSION_PARAM_SZ;
-				*updt_params++ =
-					reverb->diffusion;
 			}
 			break;
 		case REVERB_DENSITY:
@@ -630,26 +437,17 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			reverb->density =
-				GET_NEXT(values, param_max_offset, rc);
+			reverb->density = *values++;
 			pr_debug("%s: REVERB_DENSITY val:%d\n",
 				__func__, reverb->density);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					REVERB_DENSITY_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"REVERB_DENSITY", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_REVERB;
+				*updt_params++ = AUDPROC_MODULE_ID_REVERB;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_REVERB_DENSITY;
-				*updt_params++ =
+				*updt_params++ = REVERB_DENSITY_PARAM_SZ;
+				*updt_params++ = reverb->density;
+				params_length += COMMAND_PAYLOAD_SZ +
 					REVERB_DENSITY_PARAM_SZ;
-				*updt_params++ =
-					reverb->density;
 			}
 			break;
 		default:
@@ -657,7 +455,7 @@ int msm_audio_effects_reverb_handler(struct audio_client *ac,
 			break;
 		}
 	}
-	if (params_length && (rc == 0))
+	if (params_length)
 		q6asm_send_audio_effects_params(ac, params,
 						params_length);
 invalid_config:
@@ -669,16 +467,15 @@ int msm_audio_effects_bass_boost_handler(struct audio_client *ac,
 					struct bass_boost_params *bass_boost,
 					long *values)
 {
-	long *param_max_offset = values + MAX_PP_PARAMS_SZ - 1;
-	char *params = NULL;
-	int rc = 0;
-	int devices = GET_NEXT(values, param_max_offset, rc);
-	int num_commands = GET_NEXT(values, param_max_offset, rc);
+	int devices = *values++;
+	int num_commands = *values++;
+	char *params;
 	int *updt_params, i, prev_enable_flag;
 	uint32_t params_length = (MAX_INBAND_PARAM_SZ);
+	int rc = 0;
 
 	pr_debug("%s\n", __func__);
-	if (!ac || (devices == -EINVAL) || (num_commands == -EINVAL)) {
+	if (!ac) {
 		pr_err("%s: cannot set audio effects\n", __func__);
 		return -EINVAL;
 	}
@@ -691,14 +488,10 @@ int msm_audio_effects_bass_boost_handler(struct audio_client *ac,
 	updt_params = (int *)params;
 	params_length = 0;
 	for (i = 0; i < num_commands; i++) {
-		uint32_t command_id =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t command_config_state =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t index_offset =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t length =
-			GET_NEXT(values, param_max_offset, rc);
+		uint32_t command_id = *values++;
+		uint32_t command_config_state = *values++;
+		uint32_t index_offset = *values++;
+		uint32_t length = *values++;
 		switch (command_id) {
 		case BASS_BOOST_ENABLE:
 			if (length != 1 || index_offset != 0) {
@@ -707,27 +500,18 @@ int msm_audio_effects_bass_boost_handler(struct audio_client *ac,
 				goto invalid_config;
 			}
 			prev_enable_flag = bass_boost->enable_flag;
-			bass_boost->enable_flag =
-				GET_NEXT(values, param_max_offset, rc);
+			bass_boost->enable_flag = *values++;
 			pr_debug("%s: BASS_BOOST_ENABLE prev:%d new:%d\n",
 				__func__, prev_enable_flag,
 				bass_boost->enable_flag);
 			if (prev_enable_flag != bass_boost->enable_flag) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					BASS_BOOST_ENABLE_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"BASS_BOOST_ENABLE", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_BASS_BOOST;
+				*updt_params++ = AUDPROC_MODULE_ID_BASS_BOOST;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_BASS_BOOST_ENABLE;
-				*updt_params++ =
+				*updt_params++ = BASS_BOOST_ENABLE_PARAM_SZ;
+				*updt_params++ = bass_boost->enable_flag;
+				params_length += COMMAND_PAYLOAD_SZ +
 					BASS_BOOST_ENABLE_PARAM_SZ;
-				*updt_params++ =
-					bass_boost->enable_flag;
 			}
 			break;
 		case BASS_BOOST_MODE:
@@ -736,26 +520,17 @@ int msm_audio_effects_bass_boost_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			bass_boost->mode =
-				GET_NEXT(values, param_max_offset, rc);
+			bass_boost->mode = *values++;
 			pr_debug("%s: BASS_BOOST_MODE val:%d\n",
 				__func__, bass_boost->mode);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					BASS_BOOST_MODE_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"BASS_BOOST_MODE", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_BASS_BOOST;
+				*updt_params++ = AUDPROC_MODULE_ID_BASS_BOOST;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_BASS_BOOST_MODE;
-				*updt_params++ =
+				*updt_params++ = BASS_BOOST_MODE_PARAM_SZ;
+				*updt_params++ = bass_boost->mode;
+				params_length += COMMAND_PAYLOAD_SZ +
 					BASS_BOOST_MODE_PARAM_SZ;
-				*updt_params++ =
-					bass_boost->mode;
 			}
 			break;
 		case BASS_BOOST_STRENGTH:
@@ -764,26 +539,17 @@ int msm_audio_effects_bass_boost_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			bass_boost->strength =
-				GET_NEXT(values, param_max_offset, rc);
-			pr_debug("%s: BASS_BOOST_STRENGTH val:%d\n",
+			bass_boost->strength = *values++;
+			pr_debug("%s: BASS_BOOST_STRENGTHi val:%d\n",
 				__func__, bass_boost->strength);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					BASS_BOOST_STRENGTH_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"BASS_BOOST_STRENGTH", rc);
-				if (rc != 0)
-					break;
-				*updt_params++ =
-					AUDPROC_MODULE_ID_BASS_BOOST;
+				*updt_params++ = AUDPROC_MODULE_ID_BASS_BOOST;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_BASS_BOOST_STRENGTH;
-				*updt_params++ =
+				*updt_params++ = BASS_BOOST_STRENGTH_PARAM_SZ;
+				*updt_params++ = bass_boost->strength;
+				params_length += COMMAND_PAYLOAD_SZ +
 					BASS_BOOST_STRENGTH_PARAM_SZ;
-				*updt_params++ =
-					bass_boost->strength;
 			}
 			break;
 		default:
@@ -791,7 +557,7 @@ int msm_audio_effects_bass_boost_handler(struct audio_client *ac,
 			break;
 		}
 	}
-	if (params_length && (rc == 0))
+	if (params_length)
 		q6asm_send_audio_effects_params(ac, params,
 						params_length);
 invalid_config:
@@ -803,16 +569,15 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 					 struct eq_params *eq,
 					 long *values)
 {
-	long *param_max_offset = values + MAX_PP_PARAMS_SZ - 1;
-	char *params = NULL;
-	int rc = 0;
-	int devices = GET_NEXT(values, param_max_offset, rc);
-	int num_commands = GET_NEXT(values, param_max_offset, rc);
+	int devices = *values++;
+	int num_commands = *values++;
+	char *params;
 	int *updt_params, i, prev_enable_flag;
 	uint32_t params_length = (MAX_INBAND_PARAM_SZ);
+	int rc = 0;
 
 	pr_debug("%s\n", __func__);
-	if (!ac || (devices == -EINVAL) || (num_commands == -EINVAL)) {
+	if (!ac) {
 		pr_err("%s: cannot set audio effects\n", __func__);
 		return -EINVAL;
 	}
@@ -825,16 +590,11 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 	updt_params = (int *)params;
 	params_length = 0;
 	for (i = 0; i < num_commands; i++) {
-		uint32_t command_id =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t command_config_state =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t index_offset =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t length =
-			GET_NEXT(values, param_max_offset, rc);
-		uint32_t idx;
-		int j;
+		uint32_t command_id = *values++;
+		uint32_t command_config_state = *values++;
+		uint32_t index_offset = *values++;
+		uint32_t length = *values++;
+		int idx, j;
 		switch (command_id) {
 		case EQ_ENABLE:
 			if (length != 1 || index_offset != 0) {
@@ -843,26 +603,17 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 				goto invalid_config;
 			}
 			prev_enable_flag = eq->enable_flag;
-			eq->enable_flag =
-				GET_NEXT(values, param_max_offset, rc);
+			eq->enable_flag = *values++;
 			pr_debug("%s: EQ_ENABLE prev:%d new:%d\n", __func__,
 				prev_enable_flag, eq->enable_flag);
 			if (prev_enable_flag != eq->enable_flag) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					EQ_ENABLE_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"EQ_ENABLE", rc);
-				if (rc != 0)
-					break;
 				*updt_params++ =
 					AUDPROC_MODULE_ID_POPLESS_EQUALIZER;
-				*updt_params++ =
-					AUDPROC_PARAM_ID_EQ_ENABLE;
-				*updt_params++ =
+				*updt_params++ = AUDPROC_PARAM_ID_EQ_ENABLE;
+				*updt_params++ = EQ_ENABLE_PARAM_SZ;
+				*updt_params++ = eq->enable_flag;
+				params_length += COMMAND_PAYLOAD_SZ +
 					EQ_ENABLE_PARAM_SZ;
-				*updt_params++ =
-					eq->enable_flag;
 			}
 			break;
 		case EQ_CONFIG:
@@ -876,12 +627,9 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 				eq->config.eq_pregain, eq->config.preset_id);
 			for (idx = 0; idx < MAX_EQ_BANDS; idx++)
 				eq->per_band_cfg[idx].band_idx = -1;
-			eq->config.eq_pregain =
-				GET_NEXT(values, param_max_offset, rc);
-			eq->config.preset_id =
-				GET_NEXT(values, param_max_offset, rc);
-			eq->config.num_bands =
-				GET_NEXT(values, param_max_offset, rc);
+			eq->config.eq_pregain = *values++;
+			eq->config.preset_id = *values++;
+			eq->config.num_bands = *values++;
 			if (eq->config.num_bands > MAX_EQ_BANDS) {
 				pr_err("EQ_CONFIG:invalid num of bands\n");
 				rc = -EINVAL;
@@ -896,59 +644,48 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 				goto invalid_config;
 			}
 			for (j = 0; j < eq->config.num_bands; j++) {
-				idx = GET_NEXT(values, param_max_offset, rc);
+				idx = *values++;
 				if (idx >= MAX_EQ_BANDS) {
 					pr_err("EQ_CONFIG:invalid band index\n");
 					rc = -EINVAL;
 					goto invalid_config;
 				}
 				eq->per_band_cfg[idx].band_idx = idx;
-				eq->per_band_cfg[idx].filter_type =
-					GET_NEXT(values, param_max_offset, rc);
+				eq->per_band_cfg[idx].filter_type = *values++;
 				eq->per_band_cfg[idx].freq_millihertz =
-					GET_NEXT(values, param_max_offset, rc);
+								*values++;
 				eq->per_band_cfg[idx].gain_millibels =
-					GET_NEXT(values, param_max_offset, rc);
+								*values++;
 				eq->per_band_cfg[idx].quality_factor =
-					GET_NEXT(values, param_max_offset, rc);
+								*values++;
 			}
 			if (command_config_state == CONFIG_SET) {
 				int config_param_length = EQ_CONFIG_PARAM_SZ +
 					(EQ_CONFIG_PER_BAND_PARAM_SZ*
 					 eq->config.num_bands);
-				params_length += COMMAND_PAYLOAD_SZ +
-						config_param_length;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"EQ_CONFIG", rc);
-				if (rc != 0)
-					break;
 				*updt_params++ =
 					AUDPROC_MODULE_ID_POPLESS_EQUALIZER;
-				*updt_params++ =
-					AUDPROC_PARAM_ID_EQ_CONFIG;
-				*updt_params++ =
-					config_param_length;
-				*updt_params++ =
-					eq->config.eq_pregain;
-				*updt_params++ =
-					eq->config.preset_id;
-				*updt_params++ =
-					eq->config.num_bands;
+				*updt_params++ = AUDPROC_PARAM_ID_EQ_CONFIG;
+				*updt_params++ = config_param_length;
+				*updt_params++ = eq->config.eq_pregain;
+				*updt_params++ = eq->config.preset_id;
+				*updt_params++ = eq->config.num_bands;
 				for (idx = 0; idx < MAX_EQ_BANDS; idx++) {
 					if (eq->per_band_cfg[idx].band_idx < 0)
 						continue;
 					*updt_params++ =
-					eq->per_band_cfg[idx].filter_type;
+					  eq->per_band_cfg[idx].filter_type;
 					*updt_params++ =
-					eq->per_band_cfg[idx].freq_millihertz;
+					  eq->per_band_cfg[idx].freq_millihertz;
 					*updt_params++ =
-					eq->per_band_cfg[idx].gain_millibels;
+					  eq->per_band_cfg[idx].gain_millibels;
 					*updt_params++ =
-					eq->per_band_cfg[idx].quality_factor;
+					  eq->per_band_cfg[idx].quality_factor;
 					*updt_params++ =
-					eq->per_band_cfg[idx].band_idx;
+					  eq->per_band_cfg[idx].band_idx;
 				}
+				params_length += COMMAND_PAYLOAD_SZ +
+						config_param_length;
 			}
 			break;
 		case EQ_BAND_INDEX:
@@ -957,7 +694,7 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 				rc = -EINVAL;
 				goto invalid_config;
 			}
-			idx = GET_NEXT(values, param_max_offset, rc);
+			idx = *values++;
 			if (idx > MAX_EQ_BANDS) {
 				pr_err("EQ_BAND_INDEX:invalid band index\n");
 				rc = -EINVAL;
@@ -967,21 +704,14 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 			pr_debug("%s: EQ_BAND_INDEX val:%d\n",
 				__func__, eq->band_index);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					EQ_BAND_INDEX_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"EQ_BAND_INDEX", rc);
-				if (rc != 0)
-					break;
 				*updt_params++ =
 					AUDPROC_MODULE_ID_POPLESS_EQUALIZER;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_EQ_BAND_INDEX;
-				*updt_params++ =
+				*updt_params++ = EQ_BAND_INDEX_PARAM_SZ;
+				*updt_params++ = eq->band_index;
+				params_length += COMMAND_PAYLOAD_SZ +
 					EQ_BAND_INDEX_PARAM_SZ;
-				*updt_params++ =
-					eq->band_index;
 			}
 			break;
 		case EQ_SINGLE_BAND_FREQ:
@@ -994,26 +724,18 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 				pr_err("EQ_SINGLE_BAND_FREQ:invalid index\n");
 				break;
 			}
-			eq->freq_millihertz =
-				GET_NEXT(values, param_max_offset, rc);
+			eq->freq_millihertz = *values++;
 			pr_debug("%s: EQ_SINGLE_BAND_FREQ idx:%d, val:%d\n",
 				__func__, eq->band_index, eq->freq_millihertz);
 			if (command_config_state == CONFIG_SET) {
-				params_length += COMMAND_PAYLOAD_SZ +
-					EQ_SINGLE_BAND_FREQ_PARAM_SZ;
-				CHECK_PARAM_LEN(params_length,
-						MAX_INBAND_PARAM_SZ,
-						"EQ_SINGLE_BAND_FREQ", rc);
-				if (rc != 0)
-					break;
 				*updt_params++ =
 					AUDPROC_MODULE_ID_POPLESS_EQUALIZER;
 				*updt_params++ =
 					AUDPROC_PARAM_ID_EQ_SINGLE_BAND_FREQ;
-				*updt_params++ =
+				*updt_params++ = EQ_SINGLE_BAND_FREQ_PARAM_SZ;
+				*updt_params++ = eq->freq_millihertz;
+				params_length += COMMAND_PAYLOAD_SZ +
 					EQ_SINGLE_BAND_FREQ_PARAM_SZ;
-				*updt_params++ =
-					eq->freq_millihertz;
 			}
 			break;
 		default:
@@ -1021,7 +743,7 @@ int msm_audio_effects_popless_eq_handler(struct audio_client *ac,
 			break;
 		}
 	}
-	if (params_length && (rc == 0))
+	if (params_length)
 		q6asm_send_audio_effects_params(ac, params,
 						params_length);
 invalid_config:
diff --git a/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.h b/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.h
index 2fb5083d4f06..3d2e6d4065c4 100644
--- a/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.h
+++ b/sound/soc/msm/qdsp6v2/msm-audio-effects-q6-v2.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013-2016, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -16,8 +16,6 @@
 
 #include <sound/audio_effects.h>
 
-#define MAX_PP_PARAMS_SZ   128
-
 int msm_audio_effects_reverb_handler(struct audio_client *ac,
 				     struct reverb_params *reverb,
 				     long *values);
diff --git a/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c b/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c
index d549c49465b9..70f5f606360f 100644
--- a/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c
+++ b/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c
@@ -2082,7 +2082,7 @@ static int msm_compr_audio_effects_config_info(struct snd_kcontrol *kcontrol,
 					       struct snd_ctl_elem_info *uinfo)
 {
 	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
-	uinfo->count = MAX_PP_PARAMS_SZ;
+	uinfo->count = 128;
 	uinfo->value.integer.min = 0;
 	uinfo->value.integer.max = 0xFFFFFFFF;
 	return 0;
-- 
2.12.0

