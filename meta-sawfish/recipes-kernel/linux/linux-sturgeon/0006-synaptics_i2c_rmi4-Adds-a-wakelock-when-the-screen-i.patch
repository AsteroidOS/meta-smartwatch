diff --git a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
index ab15ca95978..d683b1cfc04 100644
--- a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
+++ b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
@@ -30,6 +30,7 @@
 #ifdef KERNEL_ABOVE_2_6_38
 #include <linux/input/mt.h>
 #endif
+#include <linux/wakelock.h>
 
 #define INPUT_PHYS_NAME "synaptics_dsx/touch_input"
 
@@ -1025,6 +1026,11 @@ static int synaptics_rmi4_f11_abs_report(struct synaptics_rmi4_data *rmi4_data,
 
 	input_sync(rmi4_data->input_dev);
 
+	if(touch_count > 0)
+		wake_lock(&rmi4_data->wake_lock);
+	else
+		wake_unlock(&rmi4_data->wake_lock);
+
 exit:
 	mutex_unlock(&(rmi4_data->rmi4_report_mutex));
 
@@ -3332,6 +3338,8 @@ static int synaptics_rmi4_probe(struct platform_device *pdev)
 
 	dev_err(&pdev->dev,"%s: touch probe success...\n",__func__);
 
+	wake_lock_init(&rmi4_data->wake_lock, WAKE_LOCK_SUSPEND, "synaptics_i2c_rmi4");
+
 	return retval;
 
 err_sysfs:
@@ -3388,6 +3396,7 @@ static int synaptics_rmi4_remove(struct platform_device *pdev)
 	const struct synaptics_dsx_board_data *bdata =
 			rmi4_data->hw_if->board_data;
 
+	wake_lock_destroy(&rmi4_data->wake_lock);
 	cancel_delayed_work_sync(&exp_data.work);
 	flush_workqueue(exp_data.workqueue);
 	destroy_workqueue(exp_data.workqueue);
diff --git a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
index a431d44f62f..2dca22fe93b 100644
--- a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
+++ b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
@@ -32,6 +32,8 @@
 #include <linux/earlysuspend.h>
 #endif
 
+#include <linux/wakelock.h>
+
 #if (LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 38))
 #define KERNEL_ABOVE_2_6_38
 #endif
@@ -317,6 +319,7 @@ struct synaptics_rmi4_data {
 	int (*reset_device)(struct synaptics_rmi4_data *rmi4_data);
 	int (*irq_enable)(struct synaptics_rmi4_data *rmi4_data, bool enable,
 			bool attn_only);
+	struct wake_lock wake_lock;
 };
 
 struct synaptics_dsx_bus_access {
