From e80f354e739ffd401874df8497b96added825cd5 Mon Sep 17 00:00:00 2001
From: Florent Revest <revestflo@gmail.com>
Date: Fri, 10 Nov 2017 19:36:29 +0100
Subject: [PATCH 2/2] Integrate hci_brcm and bcm_bzhw to the backported BT
 subsystem

---
 backports/drivers/bluetooth/Kconfig     |  12 +
 backports/drivers/bluetooth/Makefile    |   3 +
 backports/drivers/bluetooth/bcm_bzhw.c  | 645 ++++++++++++++++++++++++++++++
 backports/drivers/bluetooth/hci_brcm.c  | 670 ++++++++++++++++++++++++++++++++
 backports/drivers/bluetooth/hci_ldisc.c |   6 +
 backports/drivers/bluetooth/hci_uart.h  |   6 +
 6 files changed, 1342 insertions(+)
 create mode 100644 backports/drivers/bluetooth/bcm_bzhw.c
 create mode 100644 backports/drivers/bluetooth/hci_brcm.c

diff --git a/backports/drivers/bluetooth/Kconfig b/backports/drivers/bluetooth/Kconfig
index 7a13ba06cc5..4787ffbb021 100644
--- a/backports/drivers/bluetooth/Kconfig
+++ b/backports/drivers/bluetooth/Kconfig
@@ -310,4 +310,16 @@ config BACKPORT_BT_WILINK
 	  Say Y here to compile support for Texas Instrument's WiLink7 driver
 	  into the kernel or say M to compile it as module (btwilink).
 
+config BACKPORT_BT_HCIUART_BRCM
+        bool "BCM BT Line discipline support Bluez"
+        default n
+        help
+          This driver adds Line discipline support for Broadcom bluetooth
+
+config BACKPORT_BCM_BZHW
+        bool "BCM BT Host wake interrrupt handling for Bluez Line discipline"
+        default n
+        help
+          This driver adds host wake interrupt handling support for Broadcom bluetooth
+
 endmenu
diff --git a/backports/drivers/bluetooth/Makefile b/backports/drivers/bluetooth/Makefile
index 393eb6eac53..b36d00a778d 100644
--- a/backports/drivers/bluetooth/Makefile
+++ b/backports/drivers/bluetooth/Makefile
@@ -35,4 +35,7 @@ hci_uart-$(CONFIG_BACKPORT_BT_HCIUART_INTEL)	+= hci_intel.o
 hci_uart-$(CONFIG_BACKPORT_BT_HCIUART_BCM)	+= hci_bcm.o
 hci_uart-objs				:= $(hci_uart-y)
 
+obj-$(CONFIG_BACKPORT_BT_HCIUART_BRCM) += hci_brcm.o
+obj-$(CONFIG_BACKPORT_BCM_BZHW) += bcm_bzhw.o
+
 ccflags-y += -D__CHECK_ENDIAN__
diff --git a/backports/drivers/bluetooth/bcm_bzhw.c b/backports/drivers/bluetooth/bcm_bzhw.c
new file mode 100644
index 00000000000..a96935e8a09
--- /dev/null
+++ b/backports/drivers/bluetooth/bcm_bzhw.c
@@ -0,0 +1,645 @@
+/*******************************************************************************
+* Copyright 2010 Broadcom Corporation.  All rights reserved.
+*
+* @file	drivers/bluetooth/brcm_bzhw.c
+*
+* Unless you and Broadcom execute a separate written software license agreement
+* governing use of this software, this software is licensed to you under the
+* terms of the GNU General Public License version 2, available at
+* http://www.gnu.org/copyleft/gpl.html (the "GPL").
+*
+* Notwithstanding the above, under no circumstances may you combine this
+* software in any way with any other Broadcom software provided under a license
+* other than the GPL, without Broadcom's express prior written consent.
+*******************************************************************************/
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/gpio.h>
+#include <mach/gpio.h>
+#include <linux/broadcom/bcm_bzhw.h>
+#include <linux/platform_device.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/interrupt.h>
+#include <asm/irq.h>
+#include <linux/uaccess.h>
+#include <linux/tty.h>
+#include <linux/delay.h>
+
+#include <linux/of.h>
+#include <linux/of_platform.h>
+
+#ifdef CONFIG_BACKPORT_BCM_BZHW
+#define BZHW_CLOCK_ENABLE 1
+#define BZHW_CLOCK_DISABLE 0
+
+#ifndef BZHW_BT_WAKE_ASSERT
+#define BZHW_BT_WAKE_ASSERT 0
+#endif
+#ifndef BZHW_BT_WAKE_DEASSERT
+#define BZHW_BT_WAKE_DEASSERT (!(BZHW_BT_WAKE_ASSERT))
+#endif
+
+#ifndef BZHW_HOST_WAKE_ASSERT
+#define BZHW_HOST_WAKE_ASSERT 0
+#endif
+#ifndef BZHW_HOST_WAKE_DEASSERT
+#define BZHW_HOST_WAKE_DEASSERT (!(BZHW_HOST_WAKE_ASSERT))
+#endif
+
+#define TIMER_PERIOD 4
+
+/* BZHW states */
+enum bzhw_states_e {
+	BZHW_ASLEEP,
+	BZHW_ASLEEP_TO_AWAKE,
+	BZHW_AWAKE,
+	BZHW_AWAKE_TO_ASLEEP
+};
+
+struct bcmbzhw_struct *priv_g;
+struct timer_list sleep_timer_bw;
+
+static int bcm_bzhw_init_clock(struct bcmbzhw_struct *priv)
+{
+	int ret;
+	if (priv == NULL) {
+		pr_err
+		("%s BLUETOOTH: core structure not initialized\n", __func__);
+		return -1;
+	}
+	ret =
+	    pi_mgr_qos_add_request(&priv->qos_node, "bt_qos_node",
+				   PI_MGR_PI_ID_ARM_SUB_SYSTEM,
+				   PI_MGR_QOS_DEFAULT_VALUE);
+	if (ret < 0) {
+		pr_err
+	("%s BLUETOOTH:bt_qosNode addition failed\n", __func__);
+		return -1;
+	}
+	pr_debug("%s BLUETOOTH:bt_qosNode SUCCESFULL\n", __func__);
+	return 0;
+}
+
+void bcm_bzhw_timer_bt_wake(unsigned long data)
+{
+	int btwake, hostwake, ret;
+	struct bcmbzhw_struct *priv = (struct bcmbzhw_struct *)data;
+	pr_debug("%s BLUETOOTH:\n", __func__);
+	btwake = gpio_get_value(priv->bzhw_data.gpio_bt_wake);
+	hostwake = gpio_get_value(priv->bzhw_data.gpio_host_wake);
+
+	if (hostwake == BZHW_HOST_WAKE_DEASSERT
+		&& btwake == BZHW_BT_WAKE_DEASSERT) {
+		pr_debug
+		("%s BLUETOOTH:DEASSERT BT_WAKE off RTS shut UART clk\n",
+		__func__);
+
+		pi_mgr_qos_request_update(&priv->qos_node,
+				      PI_MGR_QOS_DEFAULT_VALUE);
+		priv->bzhw_state = BZHW_ASLEEP;
+		del_timer(&sleep_timer_bw);
+
+	if (wake_lock_active(&priv_g->bzhw_data.bt_wake_lock))
+		wake_unlock(&priv_g->bzhw_data.bt_wake_lock);
+	} else {
+		pr_debug("%s BLUETOOTH: state changed restart timer\n",
+		__func__);
+		ret = timer_pending(&sleep_timer_bw);
+		if (ret) {
+			pr_debug("%s: Bluetooth: Is timer pending : Yes\n",
+			__func__);
+		} else {
+			pr_debug("%s: Bluetooth: Is timer pending : No\n",
+				__func__);
+			ret = mod_timer(&sleep_timer_bw,
+				  jiffies + 2*TIMER_PERIOD*HZ);
+			if (ret)
+				pr_debug("%s: Bluetooth: Active timer restarted\n",
+				__func__);
+			else
+				pr_debug("%s: Bluetooth: Inactive timer restarted\n",
+				__func__);
+		}
+	}
+}
+
+void bcm_bzhw_timer_host_wake(unsigned long data)
+{
+	int hostwake;
+	int ret;
+	struct bcmbzhw_struct *priv = (struct bcmbzhw_struct *)data;
+	pr_debug("%s BLUETOOTH:\n", __func__);
+	if (priv->bzhw_state == BZHW_AWAKE_TO_ASLEEP ||
+		priv->bzhw_state == BZHW_ASLEEP_TO_AWAKE) {
+		pr_debug("%s BLUETOOTH: state is Awake to Asleep\n", __func__);
+		hostwake = gpio_get_value(priv->bzhw_data.gpio_host_wake);
+		if (hostwake == BZHW_HOST_WAKE_DEASSERT) {
+			pr_debug("%s BLUETOOTH: Asleep\n", __func__);
+			pi_mgr_qos_request_update(&priv->qos_node,
+				      PI_MGR_QOS_DEFAULT_VALUE);
+			priv->bzhw_state = BZHW_ASLEEP;
+			del_timer(&priv->sleep_timer_hw);
+			if (wake_lock_active(&priv->bzhw_data.host_wake_lock))
+				wake_unlock(&priv->bzhw_data.host_wake_lock);
+
+		} else {
+			pr_err("%s BLUETOOTH: state changed Asleep to Awake\n",
+				__func__);
+			priv->bzhw_state = BZHW_ASLEEP_TO_AWAKE;
+			ret = timer_pending(&priv->sleep_timer_hw);
+		if (ret) {
+			pr_debug("%s: Bluetooth: Is timer pending : Yes\n",
+				__func__);
+		} else {
+			pr_debug("%s: Bluetooth: Is timer pending : No\n",
+				__func__);
+			ret = mod_timer(&priv->sleep_timer_hw,
+				  jiffies + TIMER_PERIOD*HZ);
+			if (ret)
+				pr_debug("%s: Bluetooth: Active timer deleted\n",
+					__func__);
+		       else
+				pr_debug("%s: Bluetooth: Inactive timer deleted\n",
+					__func__);
+		   }
+		}
+	} else if (priv->bzhw_state == BZHW_ASLEEP) {
+		pr_debug("%s BLUETOOTH: Already sleeping make sure qos node is released\n",
+			__func__);
+		pi_mgr_qos_request_update(&priv->qos_node,
+			PI_MGR_QOS_DEFAULT_VALUE);
+		del_timer(&priv->sleep_timer_hw);
+			if (wake_lock_active(&priv->bzhw_data.host_wake_lock))
+				wake_unlock(&priv->bzhw_data.host_wake_lock);
+	} else {
+	hostwake = gpio_get_value(priv->bzhw_data.gpio_host_wake);
+	if (hostwake == BZHW_HOST_WAKE_DEASSERT) {
+		pr_debug("%s BLUETOOTH: change state to Awake to Asleep\n",
+			__func__);
+		priv->bzhw_state = BZHW_AWAKE_TO_ASLEEP;
+		ret = timer_pending(&priv->sleep_timer_hw);
+		if (ret) {
+			pr_debug("%s: Bluetooth: Is timer pending : Yes\n",
+				__func__);
+		} else {
+		pr_debug("%s: Bluetooth: Is timer pending : No\n",
+			__func__);
+		ret = mod_timer(&priv->sleep_timer_hw,
+			jiffies + 2*TIMER_PERIOD*HZ);
+		if (ret)
+			pr_debug("%s: Bluetooth: Active timer deleted\n",
+				__func__);
+		 else
+			pr_debug("%s: Bluetooth: Inactive timer deleted\n",
+					__func__);
+		}
+	} else if (hostwake == BZHW_HOST_WAKE_ASSERT) {
+			pr_debug("%s BLUETOOTH: change state to Awake\n",
+				__func__);
+		if (!(wake_lock_active(&priv->bzhw_data.host_wake_lock)))
+			wake_lock(&priv->bzhw_data.host_wake_lock);
+			pi_mgr_qos_request_update(&priv->qos_node,
+				      0);
+			priv->bzhw_state = BZHW_AWAKE;
+		} else {
+			pr_debug("%s BLUETOOTH: Timer restarted\n", __func__);
+			ret = timer_pending(&priv->sleep_timer_hw);
+			if (ret) {
+				pr_debug("%s: Bluetooth: Is timer pending : Yes\n",
+					__func__);
+			} else {
+				pr_debug("%s: Bluetooth: Is timer pending:No\n",
+					__func__);
+				ret = mod_timer(&priv->sleep_timer_hw,
+					  jiffies + 4*TIMER_PERIOD*HZ);
+				if (ret)
+					pr_debug("%s: Bluetooth: Active timer deleted\n",
+						__func__);
+				else
+					pr_debug("%s: Bluetooth: Inactive timer deleted\n",
+						__func__);
+			}
+		}
+	}
+}
+
+
+void bcm_bzhw_request_clock_on(struct pi_mgr_qos_node *node)
+{
+	int ret;
+	pr_debug("%s: bcm_bzhw_request_clock_on\n", __func__);
+	if (node == NULL) {
+		pr_err("%s: Node passed is null\n", __func__);
+		return;
+	}
+	ret = pi_mgr_qos_request_update(node, 0);
+	if (ret == 0)
+		pr_debug
+	("%s BLUETOOTH:UART OUT of retention\n", __func__);
+	else
+		pr_err
+	("%s BLUETOOTH: UART OUT OF retention FAILED\n", __func__);
+
+}
+void bcm_bzhw_request_clock_off(struct pi_mgr_qos_node *node)
+{
+	int ret;
+	if (node == NULL) {
+		pr_err("%s: PI node passed is null\n", __func__);
+		return;
+	}
+	pr_debug("%s: bcm_bzhw_request_clock_off\n", __func__);
+	ret = pi_mgr_qos_request_update(node, PI_MGR_QOS_DEFAULT_VALUE);
+	if (ret == 0)
+		pr_debug
+	("%s BLUETOOTH:UART in retention\n", __func__);
+	else
+		pr_err
+	("%s BLUETOOTH:UART NOT in retention\n", __func__);
+
+}
+
+int bcm_bzhw_assert_bt_wake(int bt_wake_gpio, struct pi_mgr_qos_node *lqos_node,
+				struct tty_struct *tty)
+{
+	struct uart_state *state;
+	struct uart_port *port;
+	int rc;
+	if (lqos_node == NULL || tty == NULL) {
+		pr_err("%s: Null pointers passed is null\n", __func__);
+		return -1;
+	}
+	state = tty->driver_data;
+	port = state->uart_port;
+	gpio_set_value(bt_wake_gpio, BZHW_BT_WAKE_ASSERT);
+	pr_debug("%s BLUETOOTH:ASSERT BT_WAKE\n", __func__);
+	rc = pi_mgr_qos_request_update(lqos_node, 0);
+	if (priv_g != NULL) {
+		if (!wake_lock_active(&priv_g->bzhw_data.bt_wake_lock))
+			wake_lock(&priv_g->bzhw_data.bt_wake_lock);
+	}
+	return 0;
+}
+
+int bcm_bzhw_deassert_bt_wake(int bt_wake_gpio, int host_wake_gpio)
+{
+	int ret;
+	pr_debug("%s BLUETOOTH:DEASSERT BT_WAKE\n", __func__);
+	gpio_set_value(bt_wake_gpio, BZHW_BT_WAKE_DEASSERT);
+	if (gpio_get_value(host_wake_gpio) == BZHW_HOST_WAKE_DEASSERT) {
+		ret = timer_pending(&sleep_timer_bw);
+		if (ret) {
+			pr_debug("%s: Bluetooth: Is timer pending Yes, so do nothing\n",
+			__func__);
+		if (priv_g != NULL) {
+			if (wake_lock_active(&priv_g->bzhw_data.bt_wake_lock))
+				wake_unlock(&priv_g->bzhw_data.bt_wake_lock);
+			}
+		} else {
+			pr_debug("%s: Bluetooth: Is timer pending : No\n",
+				__func__);
+			ret = mod_timer(&sleep_timer_bw,
+				  jiffies + 3*TIMER_PERIOD*HZ);
+			if (ret)
+				pr_debug("%s: Bluetooth: Active timer modified\n",
+				__func__);
+			else
+				pr_debug("%s: Bluetooth: Inactive timer modified\n",
+				__func__);
+		}
+	}
+	return 0;
+}
+
+static int bcm_bzhw_init_bt_wake(struct bcmbzhw_struct *priv)
+{
+	int rc;
+
+	if (priv->pdata->gpio_bt_wake < 0) {
+		pr_debug("%s: gpio_bt_wake=%d\n",
+			__func__, priv->pdata->gpio_bt_wake);
+		return -EINVAL;
+	}
+
+	rc = gpio_request(priv->pdata->gpio_bt_wake, "BT Power Mgmt");
+	if (rc) {
+		pr_err
+	("%s: failed to configure BT Power Mgmt: gpio_request err%d\n",
+		     __func__, rc);
+		return rc;
+	}
+
+	rc = gpio_direction_output(priv->pdata->gpio_bt_wake,
+				BZHW_BT_WAKE_DEASSERT);
+	wake_lock_init(&priv->bzhw_data.bt_wake_lock,
+			WAKE_LOCK_SUSPEND, "BTWAKE");
+	priv->bzhw_data.gpio_bt_wake = priv->pdata->gpio_bt_wake;
+	return rc;
+
+}
+
+static void bcm_bzhw_clean_bt_wake(struct bcmbzhw_struct *priv)
+{
+	if (priv->pdata->gpio_bt_wake < 0)
+		return;
+
+	wake_lock_destroy(&priv->bzhw_data.bt_wake_lock);
+	gpio_free((unsigned)priv->pdata->gpio_bt_wake);
+	priv->bzhw_data.gpio_bt_wake = -1;
+
+}
+
+static irqreturn_t bcm_bzhw_host_wake_isr(int irq, void *dev)
+{
+	unsigned int host_wake;
+	unsigned long flags;
+	int ret = -1;
+	struct bcmbzhw_struct *priv = (struct bcmbzhw_struct *)dev;
+	if (priv == NULL) {
+		pr_err("%s BLUETOOTH: Error data pointer is null\n", __func__);
+		return IRQ_HANDLED;
+	}
+	spin_lock_irqsave(&priv->bzhw_lock, flags);
+	host_wake = gpio_get_value(priv->bzhw_data.gpio_host_wake);
+	if (BZHW_HOST_WAKE_ASSERT == host_wake) {
+		pr_debug("%s BLUETOOTH: hostwake ISR Assert\n", __func__);
+		/* wake up peripheral clock */
+	if (!wake_lock_active(&priv->bzhw_data.host_wake_lock))
+		wake_lock(&priv->bzhw_data.host_wake_lock);
+		ret = pi_mgr_qos_request_update(&priv->qos_node, 0);
+		priv->bzhw_state = BZHW_AWAKE;
+		spin_unlock_irqrestore(&priv->bzhw_lock, flags);
+	} else {
+		pr_debug("%s BLUETOOTH: hostwake ISR DeAssert\n", __func__);
+		if (priv->bzhw_state == BZHW_ASLEEP) {
+			spin_unlock_irqrestore(&priv->bzhw_lock, flags);
+		} else {
+			priv->bzhw_state = BZHW_AWAKE_TO_ASLEEP;
+			mod_timer(&priv->sleep_timer_hw,
+				jiffies + TIMER_PERIOD*HZ);
+		spin_unlock_irqrestore(&priv->bzhw_lock, flags);
+		}
+	}
+	return IRQ_HANDLED;
+}
+
+static int bcm_bzhw_init_hostwake(struct bcmbzhw_struct *priv)
+{
+	int rc;
+	if (priv->pdata->gpio_host_wake < 0)
+		return -EINVAL;
+	wake_lock_init(&priv->bzhw_data.host_wake_lock, WAKE_LOCK_SUSPEND,
+		       "HOSTWAKE");
+
+	rc = gpio_request(priv->pdata->gpio_host_wake, "BT Host Power Mgmt");
+	if (rc) {
+		pr_err
+	    ("%s: failed to configure BT Host Mgmt: gpio_request err=%d\n",
+		     __func__, rc);
+		return rc;
+	}
+	rc = gpio_direction_input(priv->pdata->gpio_host_wake);
+	rc = bcm_bzhw_init_clock(priv);
+	priv->bzhw_data.gpio_host_wake = priv->pdata->gpio_host_wake;
+
+	return rc;
+}
+
+static void bcm_bzhw_clean_host_wake(struct bcmbzhw_struct *priv)
+{
+	if (priv->pdata->gpio_host_wake == -1)
+		return;
+	if (priv->bzhw_data.host_irq >= 0) {
+		free_irq(priv->bzhw_data.host_irq, bcm_bzhw_host_wake_isr);
+		priv->bzhw_data.host_irq = -1;
+	}
+
+	wake_lock_destroy(&priv->bzhw_data.host_wake_lock);
+	gpio_free((unsigned)priv->pdata->gpio_host_wake);
+	priv->bzhw_data.gpio_host_wake = -1;
+}
+
+struct bcmbzhw_struct *bcm_bzhw_start(struct tty_struct* tty)
+{
+	struct uart_state *state;
+	struct uart_port *port;
+	int rc;
+	if (priv_g != NULL) {
+		pr_debug("%s: BLUETOOTH: data pointer is valid\n", __func__);
+		priv_g->bcmtty = tty;
+		state = tty->driver_data;
+		port = state->uart_port;
+		priv_g->uport = port;
+		rc = gpio_to_irq(priv_g->bzhw_data.gpio_host_wake);
+		if (rc < 0) {
+			pr_err
+		   ("%s: failed to configure BT Host Mgmt err=%d\n",
+		     __func__, rc);
+		   goto exit_lock_host_wake;
+		}
+		priv_g->bzhw_data.host_irq = rc;
+		priv_g->bzhw_state = BZHW_AWAKE;
+		init_timer(&priv_g->sleep_timer_hw);
+		priv_g->sleep_timer_hw.expires =
+				jiffies + 2*TIMER_PERIOD*HZ;
+		priv_g->sleep_timer_hw.data = (unsigned long)priv_g;
+		priv_g->sleep_timer_hw.function = bcm_bzhw_timer_host_wake;
+
+		init_timer(&sleep_timer_bw);
+		sleep_timer_bw.expires =
+			jiffies + 3*TIMER_PERIOD*HZ;
+		sleep_timer_bw.data = (unsigned long)priv_g;
+		sleep_timer_bw.function = bcm_bzhw_timer_bt_wake;
+		pr_debug("%s: BLUETOOTH: request_irq host_irq=%d\n",
+			__func__, priv_g->bzhw_data.host_irq);
+		rc = request_irq(
+			priv_g->bzhw_data.host_irq, bcm_bzhw_host_wake_isr,
+			 (IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING |
+			  IRQF_NO_SUSPEND), "bt_host_wake", priv_g);
+		 if (rc) {
+			pr_err
+		("%s: failed to configure BT Host Mgmt:request_irq err=%d\n",
+			     __func__, rc);
+		}
+		if (priv_g->uport != NULL)
+			serial8250_togglerts_afe(priv_g->uport, 1);
+
+		return priv_g;
+	} else {
+		pr_err("%s: BLUETOOTH:data pointer null, NOT initialized\n",
+			__func__);
+		return NULL;
+	}
+exit_lock_host_wake:
+	wake_lock_destroy(&priv_g->bzhw_data.host_wake_lock);
+	gpio_free((unsigned)priv_g->pdata->gpio_host_wake);
+	return NULL;
+
+}
+
+
+void bcm_bzhw_stop(struct bcmbzhw_struct *hw_val)
+{
+	if (hw_val == NULL)
+		return;
+	pr_debug("%s: BLUETOOTH: hw_val->bzhw_data.host_irq=%d\n",
+		__func__, hw_val->bzhw_data.host_irq);
+	hw_val->bzhw_state = BZHW_ASLEEP;
+	del_timer(&hw_val->sleep_timer_hw);
+	del_timer(&sleep_timer_bw);
+	pi_mgr_qos_request_update(&hw_val->qos_node,
+				    PI_MGR_QOS_DEFAULT_VALUE);
+
+	if (wake_lock_active(&hw_val->bzhw_data.host_wake_lock))
+		wake_unlock(&hw_val->bzhw_data.host_wake_lock);
+
+	if (wake_lock_active(&hw_val->bzhw_data.bt_wake_lock))
+		wake_unlock(&hw_val->bzhw_data.bt_wake_lock);
+	if (hw_val->bzhw_data.host_irq >= 0)
+		free_irq(hw_val->bzhw_data.host_irq, hw_val);
+
+}
+
+static int bcm_bzhw_probe(struct platform_device *pdev)
+{
+
+	int rc = 0;
+	u32 val;
+
+	priv_g = kzalloc(sizeof(*priv_g), GFP_ATOMIC);
+	if (!priv_g)
+		return -ENOMEM;
+
+	spin_lock_init(&priv_g->bzhw_lock);
+
+	if (pdev->dev.platform_data) {
+		priv_g->pdata =
+		(struct bcm_bzhw_platform_data *)pdev->dev.platform_data;
+	} else if (pdev->dev.of_node) {
+		priv_g->pdata = kzalloc(sizeof(struct bcm_bzhw_platform_data),
+					GFP_ATOMIC);
+		if (priv_g->pdata == NULL)
+			goto error1;
+
+		if (of_property_read_u32(pdev->dev.of_node,
+					"bt-wake-gpio",
+					&val))
+			goto error2;
+		priv_g->pdata->gpio_bt_wake = val;
+
+		if (of_property_read_u32(pdev->dev.of_node,
+					"host-wake-gpio",
+					&val))
+			goto error2;
+		priv_g->pdata->gpio_host_wake = val;
+	} else {
+		pr_err("%s: **ERROR** NO platform data available\n", __func__);
+		goto error1;
+	}
+
+	priv_g->bzhw_data.gpio_bt_wake = -1;
+	priv_g->bzhw_data.gpio_host_wake = -1;
+	priv_g->bzhw_data.host_irq = -1;
+	pr_info("%s: gpio_bt_wake=%d, gpio_host_wake=%d\n", __func__,
+		priv_g->pdata->gpio_bt_wake, priv_g->pdata->gpio_host_wake);
+
+	priv_g->uport = NULL;
+	priv_g->bzhw_state = BZHW_ASLEEP;
+	rc = bcm_bzhw_init_bt_wake(priv_g);
+	rc = bcm_bzhw_init_hostwake(priv_g);
+
+	if (rc)
+		goto error2;
+
+	return 0;
+error2:
+	if (pdev->dev.of_node != NULL)
+		kfree(priv_g->pdata);
+error1:
+	kfree(priv_g);
+	return rc;
+}
+
+static int bcm_bzhw_remove(struct platform_device *pdev)
+{
+	if (priv_g == NULL)
+		return 0;
+
+	if (priv_g->pdata) {
+		del_timer(&priv_g->sleep_timer_hw);
+		bcm_bzhw_clean_bt_wake(priv_g);
+		bcm_bzhw_clean_host_wake(priv_g);
+		if (pi_mgr_qos_request_remove(&priv_g->qos_node))
+			pr_info("%s failed to unregister qos client\n",
+				__func__);
+	}
+
+	if (priv_g != NULL) {
+		if ((pdev->dev.of_node != NULL) && (priv_g->pdata != NULL))
+			kfree(priv_g->pdata);
+		kfree(priv_g);
+	}
+	return 0;
+}
+
+static int bcm_bzhw_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	if (priv_g == NULL)
+		return 0;
+	if (priv_g->uport != NULL)
+		serial8250_togglerts_afe(priv_g->uport, 0);
+	return 0;
+}
+
+static int bcm_bzhw_resume(struct platform_device *pdev)
+{
+	if (priv_g == NULL)
+		return 0;
+	if (priv_g->uport != NULL)
+		serial8250_togglerts_afe(priv_g->uport, 1);
+	return 0;
+}
+
+static const struct of_device_id bcm_bzhw_match[] = {
+	{ .compatible = "bcm,bzhw"},
+	{ /* Sentinel */ }
+};
+
+static struct platform_driver bcm_bzhw_platform_driver = {
+	.probe = bcm_bzhw_probe,
+	.remove = bcm_bzhw_remove,
+	.suspend = bcm_bzhw_suspend,
+	.resume = bcm_bzhw_resume,
+	.driver = {
+		   .name = "bcm_bzhw",
+		   .owner = THIS_MODULE,
+		   .of_match_table = bcm_bzhw_match,
+		   },
+};
+
+static int __init bcm_bzhw_init(void)
+{
+	int rc = platform_driver_register(&bcm_bzhw_platform_driver);
+	if (rc)
+		pr_err("%s bcm_bzhw_platform_driver_register failed err=%d\n",
+			__func__, rc);
+	else
+		pr_info("%s bcm_bzhw_init success\n", __func__);
+
+	return rc;
+}
+
+static void __exit bcm_bzhw_exit(void)
+{
+	platform_driver_unregister(&bcm_bzhw_platform_driver);
+}
+
+module_init(bcm_bzhw_init);
+module_exit(bcm_bzhw_exit);
+
+MODULE_DESCRIPTION("bcm_bzhw");
+MODULE_AUTHOR("Broadcom");
+MODULE_LICENSE("GPL");
+#endif
diff --git a/backports/drivers/bluetooth/hci_brcm.c b/backports/drivers/bluetooth/hci_brcm.c
new file mode 100644
index 00000000000..784dc7daf1b
--- /dev/null
+++ b/backports/drivers/bluetooth/hci_brcm.c
@@ -0,0 +1,670 @@
+/****************************************************************************
+*
+*	Copyright (c) 1999-2008 Broadcom Corporation
+*
+*   Unless you and Broadcom execute a separate written software license
+*   agreement governing use of this software, this software is licensed to you
+*   under the terms of the GNU General Public License version 2, available
+*    at http://www.gnu.org/licenses/old-licenses/gpl-2.0.html (the "GPL").
+*
+*   Notwithstanding the above, under no circumstances may you combine this
+*   software in any way with any other Broadcom software provided under a
+*   license other than the GPL, without Broadcom's express prior written
+*   consent.
+*
+****************************************************************************/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/types.h>
+#include <linux/fcntl.h>
+#include <linux/interrupt.h>
+#include <linux/ptrace.h>
+#include <linux/poll.h>
+#include <linux/timer.h>
+#include <linux/gpio.h>
+
+#include <linux/slab.h>
+#include <linux/tty.h>
+#include <linux/errno.h>
+#include <linux/string.h>
+#include <linux/signal.h>
+#include <linux/ioctl.h>
+#include <linux/skbuff.h>
+#include <linux/serial_core.h>
+
+#include <net/bluetooth/bluetooth.h>
+#include <net/bluetooth/hci_core.h>
+#include "hci_uart.h"
+
+#include <linux/broadcom/bcm_bzhw.h>
+
+#if 0
+#ifndef CONFIG_BT_HCIUART_DEBUG
+#undef  BT_DBG
+#define BT_DBG(A...)
+#endif
+#endif
+
+/* HCIBRCM commands */
+#define HCIBRCM_GO_TO_SLEEP_IND	0x30
+#define HCIBRCM_GO_TO_SLEEP_ACK	0x31
+#define HCIBRCM_WAKE_UP_IND	0x32
+#define HCIBRCM_WAKE_UP_ACK	0x33
+
+/* HCIBRCM receiver States */
+#define HCIBRCM_W4_PACKET_TYPE	0
+#define HCIBRCM_W4_EVENT_HDR	1
+#define HCIBRCM_W4_ACL_HDR	2
+#define HCIBRCM_W4_SCO_HDR	3
+#define HCIBRCM_W4_DATA		4
+
+#define TIMER_PERIOD 100	/* 100 ms */
+#define HOST_CONTROLLER_IDLE_TSH 500	/* 4 s */
+
+void assert_bt_wake(int bt_wake, struct pi_mgr_qos_node *lqos_node,
+			struct tty_struct *tty)
+{
+	bcm_bzhw_assert_bt_wake(bt_wake, lqos_node, tty);
+}
+
+void deassert_bt_wake(int bt_wake, int host_wake)
+{
+	bcm_bzhw_deassert_bt_wake(bt_wake, host_wake);
+
+}
+
+/* HCIBRCM states */
+enum hcibrcm_states_e {
+	HCIBRCM_ASLEEP,
+	HCIBRCM_ASLEEP_TO_AWAKE,
+	HCIBRCM_AWAKE,
+	HCIBRCM_AWAKE_TO_ASLEEP
+};
+
+struct hcibrcm_cmd {
+	u8 cmd;
+} __attribute__ ((packed));
+
+struct brcm_struct {
+	unsigned long rx_state;
+	unsigned long rx_count;
+	struct sk_buff *rx_skb;
+	struct sk_buff_head txq;
+	spinlock_t hcibrcm_lock;	/* HCIBRCM state lock   */
+	unsigned long hcibrcm_state;	/* HCIBRCM power state  */
+	unsigned short is_there_activity;
+	unsigned short inactive_period;
+	struct sk_buff_head tx_wait_q;	/* HCIBRCM wait queue   */
+	int btwake_gpio;
+	int hostwake_gpio;
+	struct pi_mgr_qos_node *lqos_node;
+};
+
+static struct timer_list sleep_timer;
+struct bcmbzhw_struct *hw_struct;
+
+/**
+ * timeout handler
+*/
+void sleep_timer_function(unsigned long data)
+{
+	struct brcm_struct *lbrcm = (struct brcm_struct *)data;
+	if (lbrcm->is_there_activity) {
+		lbrcm->inactive_period = 0;
+		lbrcm->is_there_activity = 0;
+	} else {
+		/*if (lbrcm->hcibrcm_state != HCIBRCM_ASLEEP) {*/
+		lbrcm->inactive_period += TIMER_PERIOD;
+		if (lbrcm->inactive_period >= HOST_CONTROLLER_IDLE_TSH) {
+			/* deassert BT_WAKE signal*/
+			BT_DBG("Deassert wake signal, moves to ASLEEP");
+			lbrcm->hcibrcm_state = HCIBRCM_ASLEEP;
+			lbrcm->inactive_period = 0;
+			deassert_bt_wake(lbrcm->btwake_gpio,
+			lbrcm->hostwake_gpio);
+		}
+		/*}*/
+	}
+	if (lbrcm->hcibrcm_state != HCIBRCM_ASLEEP) {
+		mod_timer(&sleep_timer,
+			  jiffies + msecs_to_jiffies(TIMER_PERIOD));
+	}
+}
+
+
+
+static void __brcm_bcm_serial_clock_on(struct hci_uart *hu)
+{
+	struct brcm_struct *brcm = hu->priv;
+	bcm_bzhw_request_clock_on(brcm->lqos_node);
+}
+
+static void __brcm_bcm_serial_clock_request_off(struct hci_uart *hu)
+{
+	struct brcm_struct *brcm = hu->priv;
+	bcm_bzhw_request_clock_off(brcm->lqos_node);
+}
+
+
+/*
+ * Builds and sends an HCIBRCM command packet.
+ * These are very simple packets with only 1 cmd byte
+ */
+static int send_hcibrcm_cmd(u8 cmd, struct hci_uart *hu)
+{
+	int err = 0;
+	struct sk_buff *skb = NULL;
+	struct brcm_struct *brcm = hu->priv;
+	struct hcibrcm_cmd *hcibrcm_packet;
+
+	BT_DBG("hu %p cmd 0x%x", hu, cmd);
+
+	/* allocate packet */
+	skb = bt_skb_alloc(1, GFP_ATOMIC);
+	if (!skb) {
+		BT_ERR("cannot allocate memory for HCIBRCM packet");
+		err = -ENOMEM;
+		goto out;
+	}
+
+	/* prepare packet */
+	hcibrcm_packet = (struct hcibrcm_cmd *)skb_put(skb, 1);
+	hcibrcm_packet->cmd = cmd;
+	skb->dev = (void *)hu->hdev;
+
+	/* send packet */
+	skb_queue_tail(&brcm->txq, skb);
+out:
+	return err;
+}
+
+/* Initialize protocol */
+static int brcm_open(struct hci_uart *hu)
+{
+	struct brcm_struct *brcm;
+	BT_DBG("hu %p", hu);
+
+	brcm = kzalloc(sizeof(*brcm), GFP_ATOMIC);
+	if (!brcm)
+		return -ENOMEM;
+
+	skb_queue_head_init(&brcm->txq);
+	skb_queue_head_init(&brcm->tx_wait_q);
+	spin_lock_init(&brcm->hcibrcm_lock);
+
+	brcm->hcibrcm_state = HCIBRCM_AWAKE;
+	hw_struct = kzalloc(sizeof(*hw_struct), GFP_ATOMIC);
+	if (!hw_struct)
+		return -ENOMEM;
+	hw_struct = bcm_bzhw_start(hu->tty);
+	if (hw_struct != NULL) {
+		brcm->btwake_gpio = hw_struct->pdata->gpio_bt_wake;
+		brcm->hostwake_gpio = hw_struct->pdata->gpio_host_wake;
+		brcm->lqos_node = &hw_struct->qos_node;
+		init_timer(&sleep_timer);
+		brcm->is_there_activity = 0;
+		hu->priv = brcm;
+		sleep_timer.expires = jiffies + msecs_to_jiffies(TIMER_PERIOD);
+		sleep_timer.data = (unsigned long)brcm;
+		sleep_timer.function = sleep_timer_function;
+		add_timer(&sleep_timer);
+		__brcm_bcm_serial_clock_on(hu);
+		assert_bt_wake(brcm->btwake_gpio, brcm->lqos_node, hu->tty);
+	} else
+		return -EFAULT;
+	return 0;
+}
+
+/* Flush protocol data */
+static int brcm_flush(struct hci_uart *hu)
+{
+	struct brcm_struct *brcm = hu->priv;
+
+	BT_DBG("hu %p", hu);
+	skb_queue_purge(&brcm->tx_wait_q);
+	skb_queue_purge(&brcm->txq);
+
+	return 0;
+}
+
+/* Close protocol */
+static int brcm_close(struct hci_uart *hu)
+{
+	struct brcm_struct *brcm = hu->priv;
+
+	BT_DBG("hu %p", hu);
+
+	skb_queue_purge(&brcm->tx_wait_q);
+	skb_queue_purge(&brcm->txq);
+	brcm->hcibrcm_state = HCIBRCM_ASLEEP;
+	del_timer(&sleep_timer);
+	deassert_bt_wake(brcm->btwake_gpio, brcm->hostwake_gpio);
+	__brcm_bcm_serial_clock_request_off(hu);
+	if (brcm->rx_skb)
+		kfree_skb(brcm->rx_skb);
+
+	if (hw_struct) {
+		bcm_bzhw_stop(hw_struct);
+		hw_struct = NULL;
+		kfree(hw_struct);
+	}
+	hu->priv = NULL;
+	kfree(brcm);
+
+	return 0;
+}
+
+/*
+ * internal function, which does common work of the device wake up process:
+ * 1. places abrcm pending packets (waiting in tx_wait_q list) in txq list.
+ * 2. changes internal state to HCIBRCM_AWAKE.
+ * Note: assumes that hcibrcm_lock spinlock is taken,
+ * shouldn't be cabrcmed otherwise!
+ */
+static void __brcm_do_awake(struct brcm_struct *brcm)
+{
+	struct sk_buff *skb = NULL;
+
+	while ((skb = skb_dequeue(&brcm->tx_wait_q)))
+		skb_queue_tail(&brcm->txq, skb);
+
+	brcm->hcibrcm_state = HCIBRCM_AWAKE;
+}
+
+/*
+ * Cabrcmed upon a wake-up-indication from the device
+ */
+static void brcm_device_want_to_wakeup(struct hci_uart *hu)
+{
+	unsigned long flags;
+	struct brcm_struct *brcm = hu->priv;
+
+	BT_DBG("hu %p", hu);
+
+	/* lock hcibrcm state */
+	spin_lock_irqsave(&brcm->hcibrcm_lock, flags);
+
+	switch (brcm->hcibrcm_state) {
+	case HCIBRCM_ASLEEP_TO_AWAKE:
+		/*
+		 * This state means that both the host and the BRF chip
+		 * have simultaneously sent a wake-up-indication packet.
+		 * Traditionaly, in this case, receiving a wake-up-indication
+		 * was enough and an additional wake-up-ack wasn't needed.
+		 * This has changed with the BRF6350, which does require an
+		 * explicit wake-up-ack. Other BRF versions, which do not
+		 * require an explicit ack here, do accept it, thus it is
+		 * perfectly safe to always send one.
+		 */
+		BT_DBG("dual wake-up-indication");
+		/* deliberate fabrcm-through - do not add break */
+	case HCIBRCM_ASLEEP:
+		/* Make sure clock is on - we may have turned clock off since
+		 * receiving the wake up indicator
+		 */
+		__brcm_bcm_serial_clock_on(hu);
+		/* acknowledge device wake up */
+		if (send_hcibrcm_cmd(HCIBRCM_WAKE_UP_ACK, hu) < 0) {
+			BT_ERR("cannot acknowledge device wake up");
+			goto out;
+		}
+		break;
+	default:
+		/* any other state is ibrcmegal */
+		BT_ERR("received HCIBRCM_WAKE_UP_IND in state %ld",
+		       brcm->hcibrcm_state);
+		break;
+	}
+
+	/* send pending packets and change state to HCIBRCM_AWAKE */
+	__brcm_do_awake(brcm);
+
+out:
+	spin_unlock_irqrestore(&brcm->hcibrcm_lock, flags);
+
+	/* actuabrcmy send the packets */
+	hci_uart_tx_wakeup(hu);
+}
+
+/*
+ * Cabrcmed upon a sleep-indication from the device
+ */
+static void brcm_device_want_to_sleep(struct hci_uart *hu)
+{
+	unsigned long flags;
+	struct brcm_struct *brcm = hu->priv;
+
+	BT_DBG("hu %p", hu);
+
+	/* lock hcibrcm state */
+	spin_lock_irqsave(&brcm->hcibrcm_lock, flags);
+
+	/* sanity check */
+	if (brcm->hcibrcm_state != HCIBRCM_AWAKE)
+		BT_ERR("ERR: HCIBRCM_GO_TO_SLEEP_IND in state %ld",
+		       brcm->hcibrcm_state);
+
+	/* acknowledge device sleep */
+	if (send_hcibrcm_cmd(HCIBRCM_GO_TO_SLEEP_ACK, hu) < 0) {
+		BT_ERR("cannot acknowledge device sleep");
+		goto out;
+	}
+
+	/* update state */
+	brcm->hcibrcm_state = HCIBRCM_ASLEEP;
+
+out:
+	spin_unlock_irqrestore(&brcm->hcibrcm_lock, flags);
+
+	/* actuabrcmy send the sleep ack packet */
+	hci_uart_tx_wakeup(hu);
+
+	spin_lock_irqsave(&brcm->hcibrcm_lock, flags);
+	if (brcm->hcibrcm_state == HCIBRCM_ASLEEP)
+		__brcm_bcm_serial_clock_request_off(hu);
+	spin_unlock_irqrestore(&brcm->hcibrcm_lock, flags);
+}
+
+/*
+ * Cabrcmed upon wake-up-acknowledgement from the device
+ */
+static void brcm_device_woke_up(struct hci_uart *hu)
+{
+	unsigned long flags;
+	struct brcm_struct *brcm = hu->priv;
+
+	BT_DBG("hu %p", hu);
+
+	/* lock hcibrcm state */
+	spin_lock_irqsave(&brcm->hcibrcm_lock, flags);
+
+	/* sanity check */
+	if (brcm->hcibrcm_state != HCIBRCM_ASLEEP_TO_AWAKE)
+		BT_ERR("received HCIBRCM_WAKE_UP_ACK in state %ld",
+		       brcm->hcibrcm_state);
+
+	/* send pending packets and change state to HCIBRCM_AWAKE */
+	__brcm_do_awake(brcm);
+
+	spin_unlock_irqrestore(&brcm->hcibrcm_lock, flags);
+
+	/* actuabrcmy send the packets */
+	hci_uart_tx_wakeup(hu);
+}
+
+/* Enqueue frame for transmittion (padding, crc, etc) */
+/* may be cabrcmed from two simultaneous tasklets */
+static int brcm_enqueue(struct hci_uart *hu, struct sk_buff *skb)
+{
+	struct brcm_struct *brcm = hu->priv;
+
+	BT_DBG("hu %p skb %p", hu, skb);
+
+	/* Prepend skb with frame type */
+	memcpy(skb_push(skb, 1), &bt_cb(skb)->pkt_type, 1);
+#if 0
+	/* lock hcibrcm state */
+	spin_lock_irqsave(&brcm->hcibrcm_lock, flags);
+
+	/* act according to current state */
+	switch (brcm->hcibrcm_state) {
+	case HCIBRCM_AWAKE:
+		BT_DBG("device awake, sending normabrcmy");
+		skb_queue_tail(&brcm->txq, skb);
+		break;
+	case HCIBRCM_ASLEEP:
+		BT_DBG("device asleep, waking up and queueing packet");
+		__brcm_bcm_serial_clock_on(hu);
+		/* save packet for later */
+		skb_queue_tail(&brcm->tx_wait_q, skb);
+		/* awake device */
+		if (send_hcibrcm_cmd(HCIBRCM_WAKE_UP_IND, hu) < 0) {
+			BT_ERR("cannot wake up device");
+			break;
+		}
+		brcm->hcibrcm_state = HCIBRCM_ASLEEP_TO_AWAKE;
+		break;
+	case HCIBRCM_ASLEEP_TO_AWAKE:
+		BT_DBG("device waking up, queueing packet");
+		/* transient state; just keep packet for later */
+		skb_queue_tail(&brcm->tx_wait_q, skb);
+		break;
+	default:
+		BT_ERR("ibrcmegal hcibrcm state: %ld (losing packet)",
+		       brcm->hcibrcm_state);
+		kfree_skb(skb);
+		break;
+	}
+
+	spin_unlock_irqrestore(&brcm->hcibrcm_lock, flags);
+#endif
+
+	skb_queue_tail(&brcm->txq, skb);
+
+	brcm->is_there_activity = 1;
+	if (brcm->hcibrcm_state == HCIBRCM_ASLEEP) {
+		BT_DBG("Asserting wake signal, moves to AWAKE");
+		/* assert BT_WAKE signal */
+		assert_bt_wake(brcm->btwake_gpio, brcm->lqos_node, hu->tty);
+		brcm->hcibrcm_state = HCIBRCM_AWAKE;
+		mod_timer(&sleep_timer,
+			  jiffies + msecs_to_jiffies(TIMER_PERIOD));
+
+	}
+
+	return 0;
+}
+
+static inline int brcm_check_data_len(struct hci_uart *hu, struct brcm_struct *brcm, int len)
+{
+	register int room = skb_tailroom(brcm->rx_skb);
+
+	BT_DBG("len %d room %d", len, room);
+
+	if (!len) {
+		hci_recv_frame(hu->hdev, brcm->rx_skb);
+	} else if (len > room) {
+		BT_ERR("Data length is too large");
+		kfree_skb(brcm->rx_skb);
+	} else {
+		brcm->rx_state = HCIBRCM_W4_DATA;
+		brcm->rx_count = len;
+		return len;
+	}
+
+	brcm->rx_state = HCIBRCM_W4_PACKET_TYPE;
+	brcm->rx_skb = NULL;
+	brcm->rx_count = 0;
+
+	return 0;
+}
+
+/* Recv data */
+static int brcm_recv(struct hci_uart *hu, const void *data, int count)
+{
+	struct brcm_struct *brcm = hu->priv;
+	register char *ptr;
+	struct hci_event_hdr *eh;
+	struct hci_acl_hdr *ah;
+	struct hci_sco_hdr *sh;
+	register int len, type, dlen;
+
+	BT_DBG("hu %p count %d rx_state %ld rx_count %ld", hu, count,
+	       brcm->rx_state, brcm->rx_count);
+
+	brcm->is_there_activity = 1;
+	if (brcm->hcibrcm_state == HCIBRCM_ASLEEP) {
+		BT_DBG("Assert wake signal, moves to AWAKE");
+		/* assert BT_WAKE signal */
+		assert_bt_wake(brcm->btwake_gpio, brcm->lqos_node, hu->tty);
+		brcm->hcibrcm_state = HCIBRCM_AWAKE;
+		mod_timer(&sleep_timer,
+			  jiffies + msecs_to_jiffies(TIMER_PERIOD));
+	}
+	ptr = data;
+	while (count) {
+		if (brcm->rx_count) {
+			len = min_t(unsigned int, brcm->rx_count, count);
+			memcpy(skb_put(brcm->rx_skb, len), ptr, len);
+			brcm->rx_count -= len;
+			count -= len;
+			ptr += len;
+
+			if (brcm->rx_count)
+				continue;
+
+			switch (brcm->rx_state) {
+			case HCIBRCM_W4_DATA:
+				BT_DBG("Complete data");
+				hci_recv_frame(hu->hdev, brcm->rx_skb);
+
+				brcm->rx_state = HCIBRCM_W4_PACKET_TYPE;
+				brcm->rx_skb = NULL;
+				continue;
+
+			case HCIBRCM_W4_EVENT_HDR:
+				eh = (struct hci_event_hdr *)brcm->rx_skb->data;
+
+				BT_DBG("Event header: evt 0x%2.2x plen %d",
+				       eh->evt, eh->plen);
+
+				brcm_check_data_len(hu, brcm, eh->plen);
+				continue;
+
+			case HCIBRCM_W4_ACL_HDR:
+				ah = (struct hci_acl_hdr *)brcm->rx_skb->data;
+				dlen = __le16_to_cpu(ah->dlen);
+
+				BT_DBG("ACL header: dlen %d", dlen);
+
+				brcm_check_data_len(hu, brcm, dlen);
+				continue;
+
+			case HCIBRCM_W4_SCO_HDR:
+				sh = (struct hci_sco_hdr *)brcm->rx_skb->data;
+
+				BT_DBG("SCO header: dlen %d", sh->dlen);
+
+				brcm_check_data_len(hu, brcm, sh->dlen);
+				continue;
+			}
+		}
+
+		/* HCIBRCM_W4_PACKET_TYPE */
+		switch (*ptr) {
+		case HCI_EVENT_PKT:
+			BT_DBG("Event packet");
+			brcm->rx_state = HCIBRCM_W4_EVENT_HDR;
+			brcm->rx_count = HCI_EVENT_HDR_SIZE;
+			type = HCI_EVENT_PKT;
+			break;
+
+		case HCI_ACLDATA_PKT:
+			BT_DBG("ACL packet");
+			brcm->rx_state = HCIBRCM_W4_ACL_HDR;
+			brcm->rx_count = HCI_ACL_HDR_SIZE;
+			type = HCI_ACLDATA_PKT;
+			break;
+
+		case HCI_SCODATA_PKT:
+			BT_DBG("SCO packet");
+			brcm->rx_state = HCIBRCM_W4_SCO_HDR;
+			brcm->rx_count = HCI_SCO_HDR_SIZE;
+			type = HCI_SCODATA_PKT;
+			break;
+
+			/* HCIBRCM signals */
+		case HCIBRCM_GO_TO_SLEEP_IND:
+			BT_DBG("HCIBRCM_GO_TO_SLEEP_IND packet");
+			brcm_device_want_to_sleep(hu);
+			ptr++;
+			count--;
+			continue;
+
+		case HCIBRCM_GO_TO_SLEEP_ACK:
+			/* shouldn't happen */
+			BT_ERR
+			    ("received HCIBRCM_GO_TO_SLEEP_ACK (in state %ld)",
+			     brcm->hcibrcm_state);
+			ptr++;
+			count--;
+			continue;
+
+		case HCIBRCM_WAKE_UP_IND:
+			BT_DBG("HCIBRCM_WAKE_UP_IND packet");
+			brcm_device_want_to_wakeup(hu);
+			ptr++;
+			count--;
+			continue;
+
+		case HCIBRCM_WAKE_UP_ACK:
+			BT_DBG("HCIBRCM_WAKE_UP_ACK packet");
+			brcm_device_woke_up(hu);
+			ptr++;
+			count--;
+			continue;
+
+		default:
+			BT_ERR("Unknown HCI packet type %2.2x", (__u8) *ptr);
+			hu->hdev->stat.err_rx++;
+			ptr++;
+			count--;
+			continue;
+		};
+
+		ptr++;
+		count--;
+
+		/* Abrcmocate packet */
+		brcm->rx_skb = bt_skb_alloc(HCI_MAX_FRAME_SIZE, GFP_ATOMIC);
+		if (!brcm->rx_skb) {
+			BT_ERR("Can't allocate mem for new packet");
+			brcm->rx_state = HCIBRCM_W4_PACKET_TYPE;
+			brcm->rx_count = 0;
+			return 0;
+		}
+
+		brcm->rx_skb->dev = (void *)hu->hdev;
+		bt_cb(brcm->rx_skb)->pkt_type = type;
+	}
+
+	return count;
+}
+
+static struct sk_buff *brcm_dequeue(struct hci_uart *hu)
+{
+	struct brcm_struct *brcm = hu->priv;
+	return skb_dequeue(&brcm->txq);
+}
+
+static struct hci_uart_proto brcmp = {
+	.id = HCI_UART_BRCM,
+    .name = "BRCM",
+	.open = brcm_open,
+	.close = brcm_close,
+	.recv = brcm_recv,
+	.enqueue = brcm_enqueue,
+	.dequeue = brcm_dequeue,
+	.flush = brcm_flush,
+};
+
+int brcm_init(void)
+{
+	int err = hci_uart_register_proto(&brcmp);
+
+	if (!err)
+		BT_INFO("HCIBRCM protocol initialized");
+	else
+		BT_ERR("HCIBRCM protocol registration failed");
+
+	return err;
+}
+
+int brcm_deinit(void)
+{
+	return hci_uart_unregister_proto(&brcmp);
+}
diff --git a/backports/drivers/bluetooth/hci_ldisc.c b/backports/drivers/bluetooth/hci_ldisc.c
index d4d9026683c..7601cdb31f6 100644
--- a/backports/drivers/bluetooth/hci_ldisc.c
+++ b/backports/drivers/bluetooth/hci_ldisc.c
@@ -684,6 +684,9 @@ static int __init hci_uart_init(void)
 #ifdef CONFIG_BACKPORT_BT_HCIUART_BCM
 	bcm_init();
 #endif
+#ifdef CONFIG_BACKPORT_BT_HCIUART_BRCM
+	brcm_init();
+#endif
 
 	return 0;
 }
@@ -710,6 +713,9 @@ static void __exit hci_uart_exit(void)
 #ifdef CONFIG_BACKPORT_BT_HCIUART_BCM
 	bcm_deinit();
 #endif
+#ifdef CONFIG_BACKPORT_BT_HCIUART_BRCM
+	brcm_deinit();
+#endif
 
 	/* Release tty registration of line discipline */
 	err = tty_unregister_ldisc(N_HCI);
diff --git a/backports/drivers/bluetooth/hci_uart.h b/backports/drivers/bluetooth/hci_uart.h
index 6ead66c8f14..0c39e8f3f68 100644
--- a/backports/drivers/bluetooth/hci_uart.h
+++ b/backports/drivers/bluetooth/hci_uart.h
@@ -37,6 +37,7 @@
 /* UART protocols */
 #define HCI_UART_MAX_PROTO	8
 
+#define HCI_UART_BRCM  0
 #define HCI_UART_H4	0
 #define HCI_UART_BCSP	1
 #define HCI_UART_3WIRE	2
@@ -160,3 +161,8 @@ int h5_deinit(void);
 int bcm_init(void);
 int bcm_deinit(void);
 #endif
+
+#ifdef CONFIG_BACKPORT_BT_HCIUART_BRCM
+int brcm_init(void);
+int brcm_deinit(void);
+#endif
-- 
2.14.3

