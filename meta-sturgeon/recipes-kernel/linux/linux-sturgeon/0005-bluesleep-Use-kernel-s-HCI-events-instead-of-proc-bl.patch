diff --git a/drivers/bluetooth/bluesleep.c b/drivers/bluetooth/bluesleep.c
index 9879fd20fcf..d8cb38fc9f4 100644
--- a/drivers/bluetooth/bluesleep.c
+++ b/drivers/bluetooth/bluesleep.c
@@ -54,6 +54,7 @@
 #include <linux/platform_data/msm_serial_hs.h>
 
 #include <net/bluetooth/bluetooth.h>
+#include <net/bluetooth/hci_core.h> /* event notifications */
 
 #define BT_SLEEP_DBG
 #ifndef BT_SLEEP_DBG
@@ -76,6 +77,15 @@
 #define AID_BLUETOOTH 1002
 #define AID_NET_BT_STACK 3008
 
+
+/* from msm_serial_hs.c */
+enum msm_hs_clk_states_e {
+	MSM_HS_CLK_PORT_OFF,     /* port not in use */
+	MSM_HS_CLK_OFF,          /* clock disabled */
+	MSM_HS_CLK_REQUEST_OFF,  /* disable after TX and RX flushed */
+	MSM_HS_CLK_ON,           /* clock enabled */
+};
+
 enum {
     DEBUG_USER_STATE = 1U << 0,
     DEBUG_SUSPEND = 1U << 1,
@@ -99,15 +109,18 @@ struct bluesleep_info {
 
 /* work function */
 static void bluesleep_sleep_work(struct work_struct *work);
+static void bluesleep_uart_awake_work(struct work_struct *work);
 
 /* work queue */
 DECLARE_DELAYED_WORK(sleep_workqueue, bluesleep_sleep_work);
+DECLARE_DELAYED_WORK(uart_awake_wq, bluesleep_uart_awake_work);
 
 /* Macros for handling sleep work */
 #define bluesleep_rx_busy() schedule_delayed_work(&sleep_workqueue, 0)
 #define bluesleep_tx_busy() schedule_delayed_work(&sleep_workqueue, 0)
 #define bluesleep_rx_idle() schedule_delayed_work(&sleep_workqueue, 0)
 #define bluesleep_tx_idle() schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_uart_work()   schedule_delayed_work(&uart_awake_wq, 0)
 
 /* 3 second timeout */
 #define TX_TIMER_INTERVAL 3
@@ -153,21 +166,57 @@ struct proc_dir_entry *bluetooth_dir, *sleep_dir;
 /*
 * Local functions
 */
+static int bluesleep_get_uart_state(void)
+{
+	return msm_hs_get_clock_state(bsi->uport);
+}
+static void hsuart_power_on(void)
+{
+	printk(KERN_INFO "HSUART CLOCK: ON\n");
+	msm_hs_request_clock_on(bsi->uport);
+	msm_hs_set_mctrl(bsi->uport, TIOCM_RTS);
+}
+static void hsuart_power_off(void)
+{
+	printk(KERN_INFO "HSUART CLOCK: OFF\n");
+	msm_hs_set_mctrl(bsi->uport, 0);
+	msm_hs_request_clock_off(bsi->uport);
+}
+static void bluesleep_uart_awake_work(struct work_struct *work)
+{
+	int clk_state;
+	if (!bsi->uport) {
+		BT_DBG("hsuart_power called. But uport is null");
+		return;
+	}
+	clk_state = bluesleep_get_uart_state();
+	if (clk_state == MSM_HS_CLK_OFF) {
+		if (has_lpm_enabled)
+			hsuart_power_on();
+	} else if (clk_state == MSM_HS_CLK_REQUEST_OFF) {
+		bluesleep_uart_work();
+	}
+}
 static void hsuart_power(int on)
 {
+	int clk_state;
 	if (test_bit(BT_SUSPEND, &flags))
 		return;
-
-	pr_info("HSUART CLOCK:  %s\n", on ? "ON" : "OFF");
 	if (on) {
-		msm_hs_request_clock_on(bsi->uport);
-		msm_hs_set_mctrl(bsi->uport, TIOCM_RTS);
-
+		if (test_bit(BT_TXDATA, &flags)) {
+			 hsuart_power_on();
+			 return;
+		}
+		clk_state = bluesleep_get_uart_state();
+		if (clk_state == MSM_HS_CLK_REQUEST_OFF) {
+			printk(KERN_INFO "HSUART CLOCK: wait...\n");
+			bluesleep_uart_work();
+		} else {
+			hsuart_power_on();
+		}
 	} else {
-		msm_hs_set_mctrl(bsi->uport, 0);
-		msm_hs_request_clock_off(bsi->uport);
+		 hsuart_power_off();
 	}
-
 }
 
 /**
@@ -453,6 +502,36 @@ static void bluesleep_stop(void)
 	wake_lock_timeout(&bsi->wake_lock, HZ / 2);
 }
 
+/**
+ * Handles HCI device events.
+ * @param this Not used.
+ * @param event The event that occurred.
+ * @param data The HCI device associated with the event.
+ * @return <code>NOTIFY_DONE</code>.
+ */
+void bluesleep_hci_event(unsigned long event)
+{
+	switch (event) {
+	case HCI_DEV_REG:
+		has_lpm_enabled = true;
+		bsi->uport = msm_hs_get_uart_port(BT_PORT_ID);
+		/* if bluetooth started, start bluesleep*/
+		bluesleep_start();
+		break;
+	case HCI_DEV_UNREG:
+		bluesleep_stop();
+		/* flush pending works */
+		flush_delayed_work(&uart_awake_wq);
+		has_lpm_enabled = false;
+		bsi->uport = NULL;
+		/* if bluetooth stopped, stop bluesleep also */
+		break;
+	case HCI_DEV_WRITE:
+		bluesleep_outgoing_data();
+		break;
+	}
+}
+
 static int bluesleep_write_proc_btwrite(struct file *file,
 					const char __user * buffer,
 					size_t count, loff_t * ppos)
@@ -487,6 +566,8 @@ static int bluesleep_write_proc_lpm(struct file *file,
 	if (b == '0') {
 		/* HCI_DEV_UNREG */
 		bluesleep_stop();
+		/* flush pending works */
+		flush_delayed_work(&uart_awake_wq);
 		has_lpm_enabled = false;
 		bsi->uport = NULL;
 	} else {
diff --git a/drivers/bluetooth/hci_ldisc.c b/drivers/bluetooth/hci_ldisc.c
index 5c9a73f02664..f21432799e0f 100644
--- a/drivers/bluetooth/hci_ldisc.c
+++ b/drivers/bluetooth/hci_ldisc.c
@@ -248,6 +248,8 @@ static int hci_uart_close(struct hci_dev *hdev)
 	return 0;
 }
 
+void bluesleep_hci_event(unsigned long event);
+
 /* Send frames from HCI layer */
 static int hci_uart_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
 {
@@ -258,6 +260,8 @@ static int hci_uart_send_frame(struct hci_dev *hdev, struct sk_buff *skb)
 
 	BT_DBG("%s: type %d len %d", hdev->name, bt_cb(skb)->pkt_type, skb->len);
 
+	bluesleep_hci_event(HCI_DEV_WRITE);
+
 	hu->proto->enqueue(hu, skb);
 
 	hci_uart_tx_wakeup(hu);
diff --git a/include/net/bluetooth/hci.h b/include/net/bluetooth/hci.h
index d95da83cb1b0..54be456bcc9c 100644
--- a/include/net/bluetooth/hci.h
+++ b/include/net/bluetooth/hci.h
@@ -44,6 +44,7 @@
 #define HCI_DEV_DOWN			4
 #define HCI_DEV_SUSPEND			5
 #define HCI_DEV_RESUME			6
+#define HCI_DEV_WRITE			7
 
 /* HCI notify events */
 #define HCI_NOTIFY_CONN_ADD		1
diff --git a/net/bluetooth/hci_sock.c b/net/bluetooth/hci_sock.c
index a5cf13bf289d..c5b77df9eb52 100644
--- a/net/bluetooth/hci_sock.c
+++ b/net/bluetooth/hci_sock.c
@@ -152,6 +152,8 @@ static bool is_filtered_packet(struct sock *sk, struct sk_buff *skb)
 	return false;
 }
 
+void bluesleep_hci_event(unsigned long event);
+
 /* Send frame to RAW socket */
 void hci_send_to_sock(struct hci_dev *hdev, struct sk_buff *skb)
 {
@@ -394,6 +396,8 @@ void hci_sock_dev_event(struct hci_dev *hdev, int event)
 {
 	struct hci_ev_si_device ev;
 
+	bluesleep_hci_event(event);
+
 	BT_DBG("hdev %s event %d", hdev->name, event);
 
 	/* Send event to monitor */
-- 
2.11.0
